{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u9ebb\u96c0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u00b6 \u306f\u3058\u3081\u306b \u00b6 \u672c\u30b5\u30a4\u30c8\u306f\u9ebb\u96c0\u3092\u30c6\u30fc\u30de\u306b\u3057\u3066\u958b\u767a\u3057\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u307e\u3068\u3081\u3066\u89e3\u8aac\u3057\u305f\u30b5\u30a4\u30c8\u3067\u3059. \u672c\u30b5\u30a4\u30c8\u3067\u306f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u9762\u767d\u3055\u306b\u6ce8\u76ee\u3057\u3066\u3044\u3066, \u5fc5\u305a\u3057\u3082\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6709\u7528\u6027\u306b\u6ce8\u76ee\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044. \u4f8b\u3048\u3070\u5f97\u70b9\u8a08\u7b97\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3053\u3053\u306b\u306f\u3042\u308a\u307e\u305b\u3093. \u307e\u305f, \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u958b\u767a\u65b9\u91dd\u3068\u3057\u3066\u300c\u642d\u5b50\u3092\u8003\u3048\u306a\u3044\u300d\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059. \u958b\u767a\u521d\u671f\u306b\u308f\u304b\u3063\u305f\u3053\u3068\u3067\u3059\u304c, \u642d\u5b50\u3092\u8003\u3048\u306a\u3044\u3053\u3068\u3067\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3084\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u898b\u901a\u3057\u304c\u304b\u306a\u308a\u826f\u304f\u306a\u308a\u307e\u3059. \u3082\u3061\u308d\u3093\u30c7\u30d0\u30c3\u30b0\u3082\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059. \u300c\u642d\u5b50\u3092\u8003\u3048\u306a\u3044\u300d\u3053\u3068\u306f\u975e\u5e38\u8b58\u306a\u3053\u3068\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3053\u306e\u3088\u3046\u306a\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308b\u305f\u3081, \u3053\u3053\u306b\u306f\u642d\u5b50\u304c\u4e00\u5207\u767b\u5834\u3057\u307e\u305b\u3093. \u4e88\u3081\u3054\u627f\u77e5\u304a\u304d\u304f\u3060\u3055\u3044. \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u00b6 \u672c\u30b5\u30a4\u30c8\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f C++17 \u3067\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059.","title":"\u9ebb\u96c0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"},{"location":"#_1","text":"","title":"\u9ebb\u96c0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"},{"location":"#_2","text":"\u672c\u30b5\u30a4\u30c8\u306f\u9ebb\u96c0\u3092\u30c6\u30fc\u30de\u306b\u3057\u3066\u958b\u767a\u3057\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u307e\u3068\u3081\u3066\u89e3\u8aac\u3057\u305f\u30b5\u30a4\u30c8\u3067\u3059. \u672c\u30b5\u30a4\u30c8\u3067\u306f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u9762\u767d\u3055\u306b\u6ce8\u76ee\u3057\u3066\u3044\u3066, \u5fc5\u305a\u3057\u3082\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6709\u7528\u6027\u306b\u6ce8\u76ee\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044. \u4f8b\u3048\u3070\u5f97\u70b9\u8a08\u7b97\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3053\u3053\u306b\u306f\u3042\u308a\u307e\u305b\u3093. \u307e\u305f, \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u958b\u767a\u65b9\u91dd\u3068\u3057\u3066\u300c\u642d\u5b50\u3092\u8003\u3048\u306a\u3044\u300d\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059. \u958b\u767a\u521d\u671f\u306b\u308f\u304b\u3063\u305f\u3053\u3068\u3067\u3059\u304c, \u642d\u5b50\u3092\u8003\u3048\u306a\u3044\u3053\u3068\u3067\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3084\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u898b\u901a\u3057\u304c\u304b\u306a\u308a\u826f\u304f\u306a\u308a\u307e\u3059. \u3082\u3061\u308d\u3093\u30c7\u30d0\u30c3\u30b0\u3082\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059. \u300c\u642d\u5b50\u3092\u8003\u3048\u306a\u3044\u300d\u3053\u3068\u306f\u975e\u5e38\u8b58\u306a\u3053\u3068\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3053\u306e\u3088\u3046\u306a\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308b\u305f\u3081, \u3053\u3053\u306b\u306f\u642d\u5b50\u304c\u4e00\u5207\u767b\u5834\u3057\u307e\u305b\u3093. \u4e88\u3081\u3054\u627f\u77e5\u304a\u304d\u304f\u3060\u3055\u3044.","title":"\u306f\u3058\u3081\u306b"},{"location":"#_3","text":"\u672c\u30b5\u30a4\u30c8\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f C++17 \u3067\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059.","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"formula/","text":"\u548c\u4e86\u78ba\u7387\u306e\u8868\u5f0f \u00b6 \u9023\u7acb\u78ba\u7387\u6f38\u5316\u5f0f(1)\u3067\u8868\u3055\u308c\u305f\u548c\u4e86\u78ba\u7387\u306e\u89e3 \\(p^{(d)}_t\\) \u3092\u6c42\u3081\u308b. \\[ \\left\\{ \\begin{aligned} p^{(0)}_{t+1} &= \\left( 1- \\frac{a_0}{S-t} \\right) p^{(0)}_t & p^{(0)}_0 &= 1 \\\\ p^{(i)}_{t+1} &= \\left( 1- \\frac{a_i}{S-t} \\right) p^{(i)}_t + \\frac{a_{i-1}}{S-t} p^{(i-1)}_t & p^{(i)}_0 &= 0 & (0 \\le i < d) \\\\ p^{(d)}_{t+1} &= \\frac{a_{d-1}}{S-t} p^{(d-1)}_t + p^{(d)}_{t} & p^{(d)}_0 &= 0 \\end{aligned} \\right. \\tag{1} \\] (1)\u5f0f\u3092\u884c\u5217\u3067\u8868\u3059. \u306a\u304a\u4ee5\u964d \\(a_d = 0\\) \u3068\u3059\u308b. \\[ A_t = \\begin{pmatrix} 1-\\frac{a_0}{S-t} & 0 & \\dots & 0 & 0 \\\\ \\frac{a_0}{S-t} & 1-\\frac{a_1}{S-t} & \\dots & 0 & 0 \\\\ \\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\ 0 & 0 & \\dots & 1-\\frac{a_{d-1}}{S-t} & 0 \\\\ 0 & 0 & \\dots & \\frac{a_{d-1}}{S-t} & 1-\\frac{a_d}{S-t} \\\\ \\end{pmatrix} \\tag{2} \\] \\[ P_t = \\begin{pmatrix} p^{(0)}_t \\\\ p^{(1)}_t \\\\ \\vdots \\\\ p^{(d-1)}_t \\\\ p^{(d)}_t \\end{pmatrix} \\tag{3} \\] \u3068\u3059\u308b\u3068 \\[ P_{t+1} = A_t P_t \\tag{4} \\] \u3068\u306a\u308b. (4)\u5f0f\u3092\u89e3\u304f\u3068 \\[ P_t = \\left\\{ \\prod_{u=0}^{t-1} A_u \\right\\} P_0 \\tag{5} \\] \u3068\u306a\u308b. \u3053\u3053\u3067 \\(A_t\\) \u306f\u4e0b\u4e09\u89d2\u884c\u5217\u3067\u3042\u308b\u304b\u3089 \\(\\prod_{u=0}^{t-1} A_u\\) \u3082\u4e0b\u4e09\u89d2\u884c\u5217\u3067\u3042\u308a, \u305d\u306e\u5bfe\u89d2\u6210\u5206\u306f \\(A_u \\ (0 \\le u \\le t-1)\\) \u306e\u5bfe\u89d2\u6210\u5206\u306e\u7a4d\u3067\u3042\u308b. \u307e\u305f\u4e0b\u4e09\u89d2\u884c\u5217\u306e\u56fa\u6709\u5024\u306f\u5bfe\u89d2\u6210\u5206\u3067\u3042\u308b\u304c \\(a_i \\ (0 \\le i \\le d-1)\\) \u306f\u3059\u3079\u3066\u7570\u306a\u308b\u304b\u3089 \\(\\prod_{u=0}^{t-1} A_u\\) \u306f\u5bfe\u89d2\u5316\u53ef\u80fd\u3067\u3042\u308b. \u3088\u3063\u3066\u9069\u5f53\u306a\u5bfe\u89d2\u884c\u5217 \\(D\\) \u3068\u6b63\u5247\u884c\u5217 \\(X\\) \u304c\u5b58\u5728\u3057\u3066 \\[ \\prod_{u=0}^{t-1} A_u = X D X^{-1} \\tag{6} \\] \u306e\u3088\u3046\u306b\u66f8\u3051\u308b. (6)\u5f0f\u3088\u308a\u9069\u5f53\u306a\u4fc2\u6570 \\(c_i \\ (0 \\le i \\le d)\\) \u3092\u5b9a\u3081\u308c\u3070 \\(p^{(d)}_t\\) \u306f \\[ \\begin{aligned} p^{(d)}_t &= \\sum_{i=0}^{d} c_i \\prod_{u=0}^{t-1} \\left( 1 - \\frac{a_i}{S-t} \\right) \\\\ &= \\sum_{i=0}^{d} c_i \\times \\frac{_{S-a_i}P_t}{_{S}P_t} \\\\ &= \\frac{1}{_{S}P_t} \\sum_{i=0}^{d} c_i \\times _{S-a_i} P_t \\end{aligned} \\tag{7} \\] \u3068\u8868\u305b\u308b. \u3053\u306e\u4fc2\u6570 \\(c_i\\) \u3092\u521d\u671f\u6761\u4ef6 \\[ \\begin{aligned} p^{(d)}_0 &= p^{(d)}_1 = \\dots = p^{(d)}_{d-1} = 0 \\\\ p^{(d)}_{d} &= \\prod_{i=0}^{d-1} \\frac{a_i}{S-i} = \\frac{1}{_SP_d} \\prod_{i=0}^{d-1} a_i = \\frac{C}{_SP_d} \\end{aligned} \\tag{8} \\] \u306b\u3088\u3063\u3066\u5b9a\u3081\u308b. \u3053\u308c\u306f \\[ \\begin{pmatrix} 1 & 1 & \\dots & 1 & 1 \\\\ S-a_0 & S-a_1 & \\dots & S-a_{d-1} & S-a_d \\\\ \\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\ _{S-a_0}P_{d-1} & _{S-a_1}P_{d-1} & \\dots & _{S-a_{d-1}}P_{d-1} & _{S-a_{d}}P_{d-1} \\\\ _{S-a_0}P_{d} & _{S-a_1}P_{d} & \\dots & _{S-a_{d-1}}P_{d} & _{S-a_{d}}P_{d} \\\\ \\end{pmatrix} \\begin{pmatrix} c_0 \\\\ c_1 \\\\ \\vdots \\\\ c_{d-1} \\\\ c_{d} \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 0 \\\\ \\vdots \\\\ 0 \\\\ C \\end{pmatrix} \\tag{9} \\] \u3068\u8868\u305b\u308b. (9)\u5f0f\u306e\u884c\u5217\u3092 \\(V\\) \u3068\u8868\u3059\u3053\u3068\u306b\u3059\u308b. \\(\\det V\\) \u306f\u30f4\u30a1\u30f3\u30c7\u30eb\u30e2\u30f3\u30c9\u884c\u5217\u5f0f\u306e\u3088\u3046\u306b\u8a08\u7b97\u3067\u304d\u3066 \\[ \\det{V} = \\prod_{0 \\le j < k \\le d} (a_j - a_k) \\tag{10} \\] \u3067\u3042\u308b. \u3053\u308c\u3068\u30af\u30e9\u30e1\u30eb\u306e\u516c\u5f0f\u3092\u4f7f\u3063\u3066\u4fc2\u6570 \\(c_i\\) \u306f \\[ c_i = \\frac{\\det{V_i}}{\\det{V}} \\tag{11} \\] \u3068\u8868\u305b\u308b. \\(\\det V_i\\) \u306f\u4f59\u56e0\u5b50\u5c55\u958b\u3092\u4f7f\u3048\u3070 \\[ \\det V_i = {(-1)}^{d+i} C \\prod_{0 \\le j < k \\le d,\\ j \\neq i,\\ k \\neq i} (a_j - a_k) \\tag{12} \\] \u3068\u66f8\u3051\u308b. \u3088\u3063\u3066(11)\u5f0f\u306f \\[ c_i = C \\prod_{j \\neq i} \\frac{1}{a_j - a_i} \\tag{13} \\] \u3068\u306a\u308b. \u3053\u3053\u3067(7)\u5f0f\u3092\u6574\u7406\u3059\u308b( \\(a_d = 0\\) \u306b\u6ce8\u610f). \\[ \\begin{aligned} p^{(d)}_t &= \\sum_{i=0}^{d-1} c_i \\times \\frac{_{S-a_i}P_t}{_SP_t} + c_n \\\\ &= \\sum_{i=0}^{d-1} c_i \\times \\frac{_{S-a_i}P_t}{_SP_t} + \\sum_{i=0}^{d-1} c_i \\\\ &= \\sum_{i=0}^{d-1} c_i \\times \\left( \\frac{_{S-a_i}P_t}{_SP_t} - 1 \\right) \\end{aligned} \\tag{14} \\] \u307e\u305f \\[ \\begin{aligned} c_i &= C \\left\\{ \\prod_{0 \\le j \\le d-1,\\ j \\neq i} \\frac{1}{a_j - a_i} \\right\\} \\times \\frac{1}{a_d - a_i} \\\\ &= -C \\left\\{ \\prod_{0 \\le j \\le d-1,\\ j \\neq i} \\frac{1}{a_j - a_i} \\right\\} \\times \\frac{1}{a_i} & (0 \\le i \\le d-1) \\end{aligned} \\tag{15} \\] \u306a\u306e\u3067, \u3053\u308c\u3092(14)\u5f0f\u306b\u4ee3\u5165\u3057\u3066\u6574\u7406\u3059\u308b\u3068 \\[ \\begin{aligned} p^{(d)}_t &= C \\sum_{i=0}^{d-1} \\frac{1}{a_i} \\left( 1 - \\frac{_{S-a_i}P_t}{_SP_t} \\right) \\prod_{j \\neq i} \\frac{1}{a_j - a_i} \\\\ &= \\left\\{ \\prod_{i=0}^{d-1} a_i \\right\\} \\times \\sum_{i=0}^{d-1} \\frac{1}{a_i} \\left( 1 - \\frac{_{S-a_i}P_t}{_SP_t} \\right) \\prod_{j \\neq i} \\frac{1}{a_j - a_i} \\end{aligned} \\tag{16} \\] \u3068\u306a\u308a\u89e3\u3092\u5f97\u308b.","title":"B. \u548c\u4e86\u78ba\u7387\u306e\u8868\u5f0f"},{"location":"formula/#_1","text":"\u9023\u7acb\u78ba\u7387\u6f38\u5316\u5f0f(1)\u3067\u8868\u3055\u308c\u305f\u548c\u4e86\u78ba\u7387\u306e\u89e3 \\(p^{(d)}_t\\) \u3092\u6c42\u3081\u308b. \\[ \\left\\{ \\begin{aligned} p^{(0)}_{t+1} &= \\left( 1- \\frac{a_0}{S-t} \\right) p^{(0)}_t & p^{(0)}_0 &= 1 \\\\ p^{(i)}_{t+1} &= \\left( 1- \\frac{a_i}{S-t} \\right) p^{(i)}_t + \\frac{a_{i-1}}{S-t} p^{(i-1)}_t & p^{(i)}_0 &= 0 & (0 \\le i < d) \\\\ p^{(d)}_{t+1} &= \\frac{a_{d-1}}{S-t} p^{(d-1)}_t + p^{(d)}_{t} & p^{(d)}_0 &= 0 \\end{aligned} \\right. \\tag{1} \\] (1)\u5f0f\u3092\u884c\u5217\u3067\u8868\u3059. \u306a\u304a\u4ee5\u964d \\(a_d = 0\\) \u3068\u3059\u308b. \\[ A_t = \\begin{pmatrix} 1-\\frac{a_0}{S-t} & 0 & \\dots & 0 & 0 \\\\ \\frac{a_0}{S-t} & 1-\\frac{a_1}{S-t} & \\dots & 0 & 0 \\\\ \\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\ 0 & 0 & \\dots & 1-\\frac{a_{d-1}}{S-t} & 0 \\\\ 0 & 0 & \\dots & \\frac{a_{d-1}}{S-t} & 1-\\frac{a_d}{S-t} \\\\ \\end{pmatrix} \\tag{2} \\] \\[ P_t = \\begin{pmatrix} p^{(0)}_t \\\\ p^{(1)}_t \\\\ \\vdots \\\\ p^{(d-1)}_t \\\\ p^{(d)}_t \\end{pmatrix} \\tag{3} \\] \u3068\u3059\u308b\u3068 \\[ P_{t+1} = A_t P_t \\tag{4} \\] \u3068\u306a\u308b. (4)\u5f0f\u3092\u89e3\u304f\u3068 \\[ P_t = \\left\\{ \\prod_{u=0}^{t-1} A_u \\right\\} P_0 \\tag{5} \\] \u3068\u306a\u308b. \u3053\u3053\u3067 \\(A_t\\) \u306f\u4e0b\u4e09\u89d2\u884c\u5217\u3067\u3042\u308b\u304b\u3089 \\(\\prod_{u=0}^{t-1} A_u\\) \u3082\u4e0b\u4e09\u89d2\u884c\u5217\u3067\u3042\u308a, \u305d\u306e\u5bfe\u89d2\u6210\u5206\u306f \\(A_u \\ (0 \\le u \\le t-1)\\) \u306e\u5bfe\u89d2\u6210\u5206\u306e\u7a4d\u3067\u3042\u308b. \u307e\u305f\u4e0b\u4e09\u89d2\u884c\u5217\u306e\u56fa\u6709\u5024\u306f\u5bfe\u89d2\u6210\u5206\u3067\u3042\u308b\u304c \\(a_i \\ (0 \\le i \\le d-1)\\) \u306f\u3059\u3079\u3066\u7570\u306a\u308b\u304b\u3089 \\(\\prod_{u=0}^{t-1} A_u\\) \u306f\u5bfe\u89d2\u5316\u53ef\u80fd\u3067\u3042\u308b. \u3088\u3063\u3066\u9069\u5f53\u306a\u5bfe\u89d2\u884c\u5217 \\(D\\) \u3068\u6b63\u5247\u884c\u5217 \\(X\\) \u304c\u5b58\u5728\u3057\u3066 \\[ \\prod_{u=0}^{t-1} A_u = X D X^{-1} \\tag{6} \\] \u306e\u3088\u3046\u306b\u66f8\u3051\u308b. (6)\u5f0f\u3088\u308a\u9069\u5f53\u306a\u4fc2\u6570 \\(c_i \\ (0 \\le i \\le d)\\) \u3092\u5b9a\u3081\u308c\u3070 \\(p^{(d)}_t\\) \u306f \\[ \\begin{aligned} p^{(d)}_t &= \\sum_{i=0}^{d} c_i \\prod_{u=0}^{t-1} \\left( 1 - \\frac{a_i}{S-t} \\right) \\\\ &= \\sum_{i=0}^{d} c_i \\times \\frac{_{S-a_i}P_t}{_{S}P_t} \\\\ &= \\frac{1}{_{S}P_t} \\sum_{i=0}^{d} c_i \\times _{S-a_i} P_t \\end{aligned} \\tag{7} \\] \u3068\u8868\u305b\u308b. \u3053\u306e\u4fc2\u6570 \\(c_i\\) \u3092\u521d\u671f\u6761\u4ef6 \\[ \\begin{aligned} p^{(d)}_0 &= p^{(d)}_1 = \\dots = p^{(d)}_{d-1} = 0 \\\\ p^{(d)}_{d} &= \\prod_{i=0}^{d-1} \\frac{a_i}{S-i} = \\frac{1}{_SP_d} \\prod_{i=0}^{d-1} a_i = \\frac{C}{_SP_d} \\end{aligned} \\tag{8} \\] \u306b\u3088\u3063\u3066\u5b9a\u3081\u308b. \u3053\u308c\u306f \\[ \\begin{pmatrix} 1 & 1 & \\dots & 1 & 1 \\\\ S-a_0 & S-a_1 & \\dots & S-a_{d-1} & S-a_d \\\\ \\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\ _{S-a_0}P_{d-1} & _{S-a_1}P_{d-1} & \\dots & _{S-a_{d-1}}P_{d-1} & _{S-a_{d}}P_{d-1} \\\\ _{S-a_0}P_{d} & _{S-a_1}P_{d} & \\dots & _{S-a_{d-1}}P_{d} & _{S-a_{d}}P_{d} \\\\ \\end{pmatrix} \\begin{pmatrix} c_0 \\\\ c_1 \\\\ \\vdots \\\\ c_{d-1} \\\\ c_{d} \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 0 \\\\ \\vdots \\\\ 0 \\\\ C \\end{pmatrix} \\tag{9} \\] \u3068\u8868\u305b\u308b. (9)\u5f0f\u306e\u884c\u5217\u3092 \\(V\\) \u3068\u8868\u3059\u3053\u3068\u306b\u3059\u308b. \\(\\det V\\) \u306f\u30f4\u30a1\u30f3\u30c7\u30eb\u30e2\u30f3\u30c9\u884c\u5217\u5f0f\u306e\u3088\u3046\u306b\u8a08\u7b97\u3067\u304d\u3066 \\[ \\det{V} = \\prod_{0 \\le j < k \\le d} (a_j - a_k) \\tag{10} \\] \u3067\u3042\u308b. \u3053\u308c\u3068\u30af\u30e9\u30e1\u30eb\u306e\u516c\u5f0f\u3092\u4f7f\u3063\u3066\u4fc2\u6570 \\(c_i\\) \u306f \\[ c_i = \\frac{\\det{V_i}}{\\det{V}} \\tag{11} \\] \u3068\u8868\u305b\u308b. \\(\\det V_i\\) \u306f\u4f59\u56e0\u5b50\u5c55\u958b\u3092\u4f7f\u3048\u3070 \\[ \\det V_i = {(-1)}^{d+i} C \\prod_{0 \\le j < k \\le d,\\ j \\neq i,\\ k \\neq i} (a_j - a_k) \\tag{12} \\] \u3068\u66f8\u3051\u308b. \u3088\u3063\u3066(11)\u5f0f\u306f \\[ c_i = C \\prod_{j \\neq i} \\frac{1}{a_j - a_i} \\tag{13} \\] \u3068\u306a\u308b. \u3053\u3053\u3067(7)\u5f0f\u3092\u6574\u7406\u3059\u308b( \\(a_d = 0\\) \u306b\u6ce8\u610f). \\[ \\begin{aligned} p^{(d)}_t &= \\sum_{i=0}^{d-1} c_i \\times \\frac{_{S-a_i}P_t}{_SP_t} + c_n \\\\ &= \\sum_{i=0}^{d-1} c_i \\times \\frac{_{S-a_i}P_t}{_SP_t} + \\sum_{i=0}^{d-1} c_i \\\\ &= \\sum_{i=0}^{d-1} c_i \\times \\left( \\frac{_{S-a_i}P_t}{_SP_t} - 1 \\right) \\end{aligned} \\tag{14} \\] \u307e\u305f \\[ \\begin{aligned} c_i &= C \\left\\{ \\prod_{0 \\le j \\le d-1,\\ j \\neq i} \\frac{1}{a_j - a_i} \\right\\} \\times \\frac{1}{a_d - a_i} \\\\ &= -C \\left\\{ \\prod_{0 \\le j \\le d-1,\\ j \\neq i} \\frac{1}{a_j - a_i} \\right\\} \\times \\frac{1}{a_i} & (0 \\le i \\le d-1) \\end{aligned} \\tag{15} \\] \u306a\u306e\u3067, \u3053\u308c\u3092(14)\u5f0f\u306b\u4ee3\u5165\u3057\u3066\u6574\u7406\u3059\u308b\u3068 \\[ \\begin{aligned} p^{(d)}_t &= C \\sum_{i=0}^{d-1} \\frac{1}{a_i} \\left( 1 - \\frac{_{S-a_i}P_t}{_SP_t} \\right) \\prod_{j \\neq i} \\frac{1}{a_j - a_i} \\\\ &= \\left\\{ \\prod_{i=0}^{d-1} a_i \\right\\} \\times \\sum_{i=0}^{d-1} \\frac{1}{a_i} \\left( 1 - \\frac{_{S-a_i}P_t}{_SP_t} \\right) \\prod_{j \\neq i} \\frac{1}{a_j - a_i} \\end{aligned} \\tag{16} \\] \u3068\u306a\u308a\u89e3\u3092\u5f97\u308b.","title":"\u548c\u4e86\u78ba\u7387\u306e\u8868\u5f0f"},{"location":"generating_hand/","text":"\u624b\u724c(\u724c\u5c71)\u751f\u6210 \u00b6 \u5168\u5e45 \u00b6 \\(M\\) \u679a\u306e\u724c\u304b\u3089\u306a\u308b\u624b\u724c, \u3059\u306a\u308f\u3061 \\(\\sum_{i=0}^8 h^n_i = M\\) \u3068\u306a\u308b\u3059\u3079\u3066\u306e \\(h^n\\) \u3092\u751f\u6210\u3059\u308b. \u4eca \\(h^n_i\\) \u3092\u8003\u3048\u3066\u3044\u3066, ( \\(i\\) \u756a\u76ee\u306e\u724c\u3092\u542b\u3081) \\(m\\) \u679a\u724c\u3092\u4f7f\u308f\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3068\u3059\u308b. \u307e\u305a \\(h^n_i\\) \u306e\u6700\u5927\u5024\u306f \\({\\rm min}(4, m)\\) \u3067\u3042\u308b. \u6b21\u306b\u6700\u5c0f\u5024\u3092\u8003\u3048\u308b. \\(i\\) \u756a\u76ee\u306e\u724c\u306e\u679a\u6570\u3092\u6c7a\u3081\u305f\u5f8c\u306f \\(4(8-i)\\) \u679a\u304c\u672a\u4f7f\u7528\u306b\u306a\u3063\u3066\u3044\u308b. \\(m\\) \u304c\u3053\u306e\u5024\u3088\u308a\u5927\u304d\u3044\u3068\u304d\u306f\u305d\u306e\u5dee\u3092\u6700\u5c0f\u5024\u3068\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b. \u3088\u3063\u3066 \\(h^n_i\\) \u306e\u6700\u5c0f\u5024\u306f \\({\\rm max}(0, m-4(8-i))\\) \u3067\u3042\u308b. \\(h^n_{i+1}\\) \u306b\u3064\u3044\u3066\u306f \\(m\\) \u3092 \\(m-h^n_i\\) \u306b\u7f6e\u304d\u63db\u3048\u3066\u540c\u69d8\u306b\u8003\u3048\u308c\u3070\u3088\u3044. \u3053\u306e\u51e6\u7406\u3092\u518d\u5e30\u95a2\u6570\u3067\u5b9f\u88c5\u3059\u308b. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> #include <functional> #include <vector> void generate ( int n , int m , std :: function < void ( const std :: vector < int >& ) > func ) { static std :: vector < int > h ( 9 ); if ( n == 9 ) { func ( h ); } else { for ( int i = std :: max ( 0 , m - 4 * ( 8 - n )); i <= std :: min ( 4 , m ); ++ i ) { h [ n ] = i ; generate ( n + 1 , m - i , func ); } } } int main () { int M ; std :: cin >> M ; generate ( 0 , M , []( const std :: vector < int >& h ) { for ( const auto & i : h ) { std :: cout << i << ' ' ; } std :: cout << '\\n' ; }); return 0 ; } \u4e71\u629e \u00b6 \\(M\\) \u679a\u306e\u724c\u304b\u3089\u306a\u308b\u624b\u724c\u3092\u30e9\u30f3\u30c0\u30e0\u306b \\(N\\) \u500b\u751f\u6210\u3059\u308b. \u3053\u308c\u306f Fisher-Yates \u6cd5 \u3092\u7528\u3044\u3066\u5b9f\u73fe\u3067\u304d\u308b. \u3053\u3053\u3067\u306f 136 \u679a\u306e\u724c\u3092\u533a\u5225\u3057\u3066\u624b\u724c\u3092\u69cb\u6210\u3059\u308b\u724c\u306e\u756a\u53f7\u3092\u51fa\u529b\u3059\u308b. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> #include <random> #include <vector> int main () { int M , N ; std :: vector < int > tiles ( 136 ); std :: mt19937 rand ( std :: random_device {}()); std :: cin >> M >> N ; std :: iota ( tiles . begin (), tiles . end (), 0 ); for ( int i = 0 ; i < N ; ++ i ) { for ( int j = 0 ; j < M ; ++ j ) { int n = rand () % ( 136 - j ); std :: swap ( tiles [ n ], tiles [ 135 - j ]); std :: cout << n << \" \" ; } std :: cout << \" \\n \" ; } return 0 ; } Note std::sample \u306e\u5229\u7528\u3082\u691c\u8a0e\u3059\u308b \u91cd\u8907\u7d44\u307f\u5408\u308f\u305b \u00b6 \u540c\u3058\u7a2e\u985e\u306e\u724c\u3092\u533a\u5225\u3059\u308b\u5834\u5408\u306e 14 \u679a\u306e\u624b\u724c\u306e\u30d1\u30bf\u30fc\u30f3\u6570\u306f \\(_{136}C_{14}\\) \u3067\u3042\u308b. \u4e00\u65b9, \u540c\u3058\u7a2e\u985e\u306e\u724c\u3092\u533a\u5225\u3057\u306a\u3044\u5834\u5408\u306e\u30d1\u30bf\u30fc\u30f3\u6570\u306f, \u3059\u3079\u3066\u306e\u624b\u724c\u30d1\u30bf\u30fc\u30f3\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3067\u3082\u6c42\u3081\u3089\u308c\u308b\u304c, \u91cd\u8907\u7d44\u307f\u5408\u308f\u305b\u3092\u8003\u3048\u308c\u3070\u9ad8\u901f\u306b\u6c42\u3081\u3089\u308c\u308b. \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u306f\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b3\u30f3\u30c6\u30b9\u30c8\u30c1\u30e3\u30ec\u30f3\u30b8\u30d6\u30c3\u30af \u7b2c 2 \u7248\u300f\u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u3068\u3057, \u3053\u3053\u3067\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u307f\u793a\u3059. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <array> #include <iostream> int main () { // N \u7a2e\u985e\u306e\u724c\u304c\u3042\u308a, \u305d\u308c\u305e\u308c\u306e\u7a2e\u985e\u306e\u724c\u306f A \u679a\u305a\u3064\u3042\u308b. // \u7570\u306a\u308b\u7a2e\u985e\u306e\u724c\u540c\u58eb\u306f\u533a\u5225\u3067\u304d\u308b\u304c, \u540c\u3058\u7a2e\u985e\u306e\u724c\u540c\u58eb\u306f\u533a\u5225\u3067\u304d\u306a\u3044. // \u3053\u308c\u3089\u306e\u724c\u304b\u3089 M \u679a\u9078\u3076\u7d44\u307f\u5408\u308f\u305b\u306e\u7dcf\u6570\u3092\u6c42\u3081\u308b. constexpr int N = 34 ; constexpr int M = 14 ; constexpr int A = 4 ; std :: array < std :: array < unsigned long long , M + 1 > , N + 1 > dp {}; for ( int i = 0 ; i <= N ; ++ i ) { dp [ i ][ 0 ] = 1 ; } for ( int i = 0 ; i < N ; ++ i ) { for ( int j = 1 ; j <= M ; ++ j ) { if ( j - 1 - A >= 0 ) { dp [ i + 1 ][ j ] = dp [ i + 1 ][ j - 1 ] + dp [ i ][ j ] - dp [ i ][ j - 1 - A ]; } else { dp [ i + 1 ][ j ] = dp [ i + 1 ][ j - 1 ] + dp [ i ][ j ]; } } } std :: cout << dp [ N ][ M ] << std :: endl ; return 0 ; } \u51fa\u529b: 1 326520504500","title":"2. \u624b\u724c(\u724c\u5c71)\u751f\u6210"},{"location":"generating_hand/#_1","text":"","title":"\u624b\u724c(\u724c\u5c71)\u751f\u6210"},{"location":"generating_hand/#_2","text":"\\(M\\) \u679a\u306e\u724c\u304b\u3089\u306a\u308b\u624b\u724c, \u3059\u306a\u308f\u3061 \\(\\sum_{i=0}^8 h^n_i = M\\) \u3068\u306a\u308b\u3059\u3079\u3066\u306e \\(h^n\\) \u3092\u751f\u6210\u3059\u308b. \u4eca \\(h^n_i\\) \u3092\u8003\u3048\u3066\u3044\u3066, ( \\(i\\) \u756a\u76ee\u306e\u724c\u3092\u542b\u3081) \\(m\\) \u679a\u724c\u3092\u4f7f\u308f\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3068\u3059\u308b. \u307e\u305a \\(h^n_i\\) \u306e\u6700\u5927\u5024\u306f \\({\\rm min}(4, m)\\) \u3067\u3042\u308b. \u6b21\u306b\u6700\u5c0f\u5024\u3092\u8003\u3048\u308b. \\(i\\) \u756a\u76ee\u306e\u724c\u306e\u679a\u6570\u3092\u6c7a\u3081\u305f\u5f8c\u306f \\(4(8-i)\\) \u679a\u304c\u672a\u4f7f\u7528\u306b\u306a\u3063\u3066\u3044\u308b. \\(m\\) \u304c\u3053\u306e\u5024\u3088\u308a\u5927\u304d\u3044\u3068\u304d\u306f\u305d\u306e\u5dee\u3092\u6700\u5c0f\u5024\u3068\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b. \u3088\u3063\u3066 \\(h^n_i\\) \u306e\u6700\u5c0f\u5024\u306f \\({\\rm max}(0, m-4(8-i))\\) \u3067\u3042\u308b. \\(h^n_{i+1}\\) \u306b\u3064\u3044\u3066\u306f \\(m\\) \u3092 \\(m-h^n_i\\) \u306b\u7f6e\u304d\u63db\u3048\u3066\u540c\u69d8\u306b\u8003\u3048\u308c\u3070\u3088\u3044. \u3053\u306e\u51e6\u7406\u3092\u518d\u5e30\u95a2\u6570\u3067\u5b9f\u88c5\u3059\u308b. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> #include <functional> #include <vector> void generate ( int n , int m , std :: function < void ( const std :: vector < int >& ) > func ) { static std :: vector < int > h ( 9 ); if ( n == 9 ) { func ( h ); } else { for ( int i = std :: max ( 0 , m - 4 * ( 8 - n )); i <= std :: min ( 4 , m ); ++ i ) { h [ n ] = i ; generate ( n + 1 , m - i , func ); } } } int main () { int M ; std :: cin >> M ; generate ( 0 , M , []( const std :: vector < int >& h ) { for ( const auto & i : h ) { std :: cout << i << ' ' ; } std :: cout << '\\n' ; }); return 0 ; }","title":"\u5168\u5e45"},{"location":"generating_hand/#_3","text":"\\(M\\) \u679a\u306e\u724c\u304b\u3089\u306a\u308b\u624b\u724c\u3092\u30e9\u30f3\u30c0\u30e0\u306b \\(N\\) \u500b\u751f\u6210\u3059\u308b. \u3053\u308c\u306f Fisher-Yates \u6cd5 \u3092\u7528\u3044\u3066\u5b9f\u73fe\u3067\u304d\u308b. \u3053\u3053\u3067\u306f 136 \u679a\u306e\u724c\u3092\u533a\u5225\u3057\u3066\u624b\u724c\u3092\u69cb\u6210\u3059\u308b\u724c\u306e\u756a\u53f7\u3092\u51fa\u529b\u3059\u308b. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> #include <random> #include <vector> int main () { int M , N ; std :: vector < int > tiles ( 136 ); std :: mt19937 rand ( std :: random_device {}()); std :: cin >> M >> N ; std :: iota ( tiles . begin (), tiles . end (), 0 ); for ( int i = 0 ; i < N ; ++ i ) { for ( int j = 0 ; j < M ; ++ j ) { int n = rand () % ( 136 - j ); std :: swap ( tiles [ n ], tiles [ 135 - j ]); std :: cout << n << \" \" ; } std :: cout << \" \\n \" ; } return 0 ; } Note std::sample \u306e\u5229\u7528\u3082\u691c\u8a0e\u3059\u308b","title":"\u4e71\u629e"},{"location":"generating_hand/#_4","text":"\u540c\u3058\u7a2e\u985e\u306e\u724c\u3092\u533a\u5225\u3059\u308b\u5834\u5408\u306e 14 \u679a\u306e\u624b\u724c\u306e\u30d1\u30bf\u30fc\u30f3\u6570\u306f \\(_{136}C_{14}\\) \u3067\u3042\u308b. \u4e00\u65b9, \u540c\u3058\u7a2e\u985e\u306e\u724c\u3092\u533a\u5225\u3057\u306a\u3044\u5834\u5408\u306e\u30d1\u30bf\u30fc\u30f3\u6570\u306f, \u3059\u3079\u3066\u306e\u624b\u724c\u30d1\u30bf\u30fc\u30f3\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3067\u3082\u6c42\u3081\u3089\u308c\u308b\u304c, \u91cd\u8907\u7d44\u307f\u5408\u308f\u305b\u3092\u8003\u3048\u308c\u3070\u9ad8\u901f\u306b\u6c42\u3081\u3089\u308c\u308b. \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u306f\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b3\u30f3\u30c6\u30b9\u30c8\u30c1\u30e3\u30ec\u30f3\u30b8\u30d6\u30c3\u30af \u7b2c 2 \u7248\u300f\u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u3068\u3057, \u3053\u3053\u3067\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u307f\u793a\u3059. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <array> #include <iostream> int main () { // N \u7a2e\u985e\u306e\u724c\u304c\u3042\u308a, \u305d\u308c\u305e\u308c\u306e\u7a2e\u985e\u306e\u724c\u306f A \u679a\u305a\u3064\u3042\u308b. // \u7570\u306a\u308b\u7a2e\u985e\u306e\u724c\u540c\u58eb\u306f\u533a\u5225\u3067\u304d\u308b\u304c, \u540c\u3058\u7a2e\u985e\u306e\u724c\u540c\u58eb\u306f\u533a\u5225\u3067\u304d\u306a\u3044. // \u3053\u308c\u3089\u306e\u724c\u304b\u3089 M \u679a\u9078\u3076\u7d44\u307f\u5408\u308f\u305b\u306e\u7dcf\u6570\u3092\u6c42\u3081\u308b. constexpr int N = 34 ; constexpr int M = 14 ; constexpr int A = 4 ; std :: array < std :: array < unsigned long long , M + 1 > , N + 1 > dp {}; for ( int i = 0 ; i <= N ; ++ i ) { dp [ i ][ 0 ] = 1 ; } for ( int i = 0 ; i < N ; ++ i ) { for ( int j = 1 ; j <= M ; ++ j ) { if ( j - 1 - A >= 0 ) { dp [ i + 1 ][ j ] = dp [ i + 1 ][ j - 1 ] + dp [ i ][ j ] - dp [ i ][ j - 1 - A ]; } else { dp [ i + 1 ][ j ] = dp [ i + 1 ][ j - 1 ] + dp [ i ][ j ]; } } } std :: cout << dp [ N ][ M ] << std :: endl ; return 0 ; } \u51fa\u529b: 1 326520504500","title":"\u91cd\u8907\u7d44\u307f\u5408\u308f\u305b"},{"location":"probability/","text":"\u548c\u4e86\u78ba\u7387 \u00b6 \u6709\u52b9\u724c\u306e\u679a\u6570\u306e\u5909\u5316\u306b\u5206\u5c90\u304c\u306a\u3044\u5834\u5408 \u00b6 \u3042\u308b\u624b\u724c\u304c\u4e0e\u3048\u3089\u308c, \u3069\u306e\u3088\u3046\u306b\u548c\u4e86\u306b\u5411\u304b\u3063\u3066\u3082\u6709\u52b9\u724c\u306e\u679a\u6570\u306e\u5909\u5316\u304c 1 \u901a\u308a\u3067\u3042\u308b\u3068\u3059\u308b. \u3053\u3053\u3067\u548c\u4e86\u5f62\u306f 1 \u901a\u308a\u3067\u306a\u304f\u3066\u3082\u3088\u3044. \u3053\u306e\u624b\u724c\u306e\u7f6e\u63db\u6570\u3092 \\(d\\) , \u6709\u52b9\u724c\u306e\u679a\u6570\u3092 \\(a_0\\) \u3068\u3059\u308b. \u3053\u306e\u72b6\u614b\u304b\u3089\u6709\u52b9\u724c\u3092 1 \u679a\u5f15\u304f\u3054\u3068\u306b\u7f6e\u63db\u6570\u304c 1 \u305a\u3064\u6e1b\u5c11\u3057\u6700\u7d42\u7684\u306b 0 \u306b\u306a\u308b\u304c, \u3053\u306e\u904e\u7a0b\u3067\u6709\u52b9\u724c\u306e\u679a\u6570\u304c \\(a_0, a_1, \\ldots , a_{d-1}\\) \u3068\u5909\u5316\u3059\u308b. \u624b\u724c\u306e\u7f6e\u63db\u6570\u304c \\(d\\) \u306e\u3082\u306e\u304b\u3089 \\(0\\) \u306e\u3082\u306e\u307e\u3067\u306e \\(d+1\\) \u500b\u306e\u72b6\u614b\u304c\u5b58\u5728\u3059\u308b\u304b\u3089, \u5404\u72b6\u614b\u9593\u306e\u9077\u79fb\u3092\u8868\u3059\u78ba\u7387\u884c\u5217 \\(A_u\\) \u3092\u8003\u3048\u308c\u3070\u548c\u4e86\u78ba\u7387\u3092\u8868\u305b\u308b. \\[ A_u = \\begin{pmatrix} 1-\\frac{a_0}{S-u} & 0 & \\dots & 0 & 0 \\\\ \\frac{a_0}{S-u} & 1-\\frac{a_1}{S-u} & \\dots & 0 & 0 \\\\ \\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\ 0 & 0 & \\dots & 1-\\frac{a_{d-1}}{S-u} & 0 \\\\ 0 & 0 & \\dots & \\frac{a_{d-1}}{S-u} & 1-\\frac{a_d}{S-u} \\\\ \\end{pmatrix} \\tag{1} \\] (1)\u5f0f\u3067 \\(u\\) \u306f\u5de1\u76ee, \\(S\\) \u306f 0 \u5de1\u76ee\u3067\u306e\u724c\u306e\u7dcf\u6570\u3092\u8868\u3059. \u307e\u305f \\(a_d = 0\\) \u3068\u3059\u308b. \\(t\\) \u5de1\u76ee\u306b\u304a\u3051\u308b\u548c\u4e86\u78ba\u7387 \\(p_t\\) \u306f \\[ p_t = {}^t \\boldsymbol{e}_d A_{t-1} A_{t-2} \\cdots A_1 A_0 \\boldsymbol{e}_0 \\tag{2} \\] \u3068\u66f8\u3051\u308b(\u884c\u5217\u3084\u30d9\u30af\u30c8\u30eb\u306e\u6dfb\u5b57\u306e\u59cb\u307e\u308a\u304c 0 \u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f). (2)\u5f0f\u3092\u8a08\u7b97\u3059\u308b\u65b9\u6cd5\u306f 2 \u901a\u308a\u3042\u308a, \u2460 \\(\\boldsymbol{e}_0\\) \u306b\u5de6\u304b\u3089 \\(A_u\\) \u3092\u7e70\u308a\u8fd4\u3057\u4f5c\u7528\u3055\u305b\u308b\u65b9\u6cd5\u3068 \u2461 \\({}^t \\boldsymbol{e}_d\\) \u306b\u53f3\u304b\u3089 \\(A_u\\) \u3092\u7e70\u308a\u8fd4\u3057\u4f5c\u7528\u3055\u305b\u308b\u65b9\u6cd5\u304c\u3042\u308b. \u305d\u308c\u305e\u308c\u306e\u65b9\u6cd5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u308b. \\[ \\boldsymbol{q}_0 = \\boldsymbol{e}_0,\\ \\boldsymbol{q}_{u+1} = A_u \\boldsymbol{q}_u \\tag{3} \\] \\[ \\boldsymbol{p}_t = \\boldsymbol{e}_d,\\ {}^t\\boldsymbol{p}_u = {}^t\\boldsymbol{p}_{u+1} A_u \\tag{4} \\] \\(\\boldsymbol{q}_u\\) \u306f \\(u\\) \u5de1\u76ee\u3067\u306e\u5404\u72b6\u614b\u306e\u5b58\u5728\u78ba\u7387\u3092\u8868\u3057, \\(\\boldsymbol{p}_u\\) \u306f \\(u\\) \u5de1\u76ee\u3067\u306e\u5404\u72b6\u614b\u306e\u548c\u4e86\u78ba\u7387\u3092\u8868\u3059. \u5b58\u5728\u78ba\u7387\u3068\u548c\u4e86\u78ba\u7387\u306e\u95a2\u4fc2\u306f\u4ee5\u4e0b\u306e\u5f0f\u3067\u8868\u305b\u308b. \\[ p_t = {}^t\\boldsymbol{p}_u \\boldsymbol{q}_u = {}^t\\boldsymbol{p}_0 \\boldsymbol{e}_0 = {}^t\\boldsymbol{e}_d \\boldsymbol{q}_t \\tag{5} \\] \u3053\u306e\u4f8b\u306e\u3088\u3046\u306b\u6709\u52b9\u724c\u306e\u679a\u6570\u306e\u5909\u5316\u304c 1 \u901a\u308a\u3067\u3042\u308c\u3070\u3069\u3061\u3089\u306e\u65b9\u6cd5\u3082\u4f7f\u3048\u308b\u304c, \u305d\u3046\u3067\u306f\u306a\u3044\u5834\u5408\u548c\u4e86\u3078\u5411\u304b\u3046\u9014\u4e2d\u306e\u72b6\u614b\u306e\u548c\u4e86\u78ba\u7387\u3092\u6700\u5927\u5316\u3059\u308b\u6253\u724c\u3092\u9078\u629e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u5f8c\u8005\u306e\u65b9\u6cd5\u3057\u304b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u306a\u3044. \u6709\u52b9\u724c\u306e\u679a\u6570\u306e\u5909\u5316\u306b\u5206\u5c90\u304c\u3042\u308b\u5834\u5408 \u00b6 \u6709\u52b9\u724c\u306e\u679a\u6570\u306e\u5909\u5316\u304c 1 \u901a\u308a\u3067\u306f\u306a\u304f\u5f15\u3044\u305f\u724c\u306b\u5fdc\u3058\u3066\u5206\u5c90\u3059\u308b\u5834\u5408\u3092\u8003\u3048\u308b. \u548c\u4e86\u3078\u5411\u304b\u3046\u624b\u724c\u306e\u5909\u5316\u3092\u8868\u3059\u6709\u52b9\u975e\u5de1\u56de\u30b0\u30e9\u30d5(DAG, \u4ee5\u964d\u624b\u724c\u5909\u5316\u306e\u30b0\u30e9\u30d5\u3068\u547c\u3076)\u3092\u5c0e\u5165\u3059\u308b. \u56f31: \u624b\u724c\u5909\u5316\u306e\u30b0\u30e9\u30d5(\u9ed2\u5b9f\u7dda\u306f\u6709\u52b9\u724c\u306e\u81ea\u6478, \u9ed2\u7834\u7dda\u306f\u4e0d\u8981\u724c\u306e\u6253\u724c, \u8d64\u5b9f\u7dda\u306f\u624b\u66ff\u308f\u308a, \u8d64\u7834\u7dda\u306f\u5411\u8074\u623b\u3057\u3092\u8868\u3059) \u3053\u308c\u306f\u624b\u724c\u65b9\u5411\u3068\u5de1\u76ee\u65b9\u5411\u306e 2 \u3064\u306e\u65b9\u5411\u3078\u306e\u5e83\u304c\u308a\u3092\u6301\u3064\u30b0\u30e9\u30d5\u3067\u3042\u308b. \u5404\u9802\u70b9\u304c\u5404\u624b\u724c, \u5404\u5de1\u76ee\u306e\u548c\u4e86\u78ba\u7387\u3092\u8868\u3059. \u756a\u53f7\u304c\u540c\u3058\u9802\u70b9\u3069\u3046\u3057\u306f\u624b\u724c\u3068\u3057\u3066\u306f\u540c\u3058(\u5de1\u76ee\u304c\u7570\u306a\u308b)\u3067\u3042\u308b. \u306a\u304a\u7c21\u5358\u306e\u305f\u3081 0, 1 \u5de1\u76ee\u306e\u72b6\u614b\u3057\u304b\u793a\u3057\u3066\u3044\u306a\u3044. \u5148\u8ff0\u306e\u3088\u3046\u306b\u548c\u4e86\u78ba\u7387\u3092\u6c42\u3081\u308b\u306b\u306f\u5404\u72b6\u614b\u306e\u548c\u4e86\u78ba\u7387\u3092\u77e5\u3089\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u305f\u3081, \u52d5\u7684\u8a08\u753b\u6cd5(DP)\u3092\u4f7f\u3063\u3066\u8a08\u7b97\u3059\u308b\u969b\u306f\u77e2\u5370\u306e\u5411\u304d\u3092\u9006\u5411\u304d\u306b\u305f\u3069\u3063\u3066\u5404\u72b6\u614b\u3092\u8a2a\u554f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b. \u3053\u3053\u3067 \\(3n+1\\) \u679a\u306e\u624b\u724c\u306e\u96c6\u5408\u3092 \\(H_1\\) , \\(3n+2\\) \u679a\u306e\u624b\u724c\u306e\u96c6\u5408\u3092 \\(H_2\\) , \u5de1\u76ee\u3092 \\(u\\) \u3068\u3057\u3066\u5404\u72b6\u614b\u306e\u548c\u4e86\u78ba\u7387\u306f\u4ee5\u4e0b\u306e\u6f38\u5316\u5f0f\u3067\u8868\u305b\u308b. \\[ p^h_u = \\left\\{ \\begin{aligned} & p^h_{u+1} + \\sum_{h' \\in \\mathrm{adj}(h)} \\frac{e(h, h')}{S-u} (p^{h'}_{u+1} - p^h_{u+1}) & (h \\in H_1) \\\\ & \\max_{h' \\in \\mathrm{adj}(h)} \\left\\{ p^{h'}_u \\right\\} & (h \\in H_2) \\end{aligned} \\right. \\tag{6} \\] (6)\u5f0f\u3067 \\(\\mathrm{adj}(h)\\) \u306f\u96a3\u63a5\u3059\u308b\u624b\u724c\u306e\u96c6\u5408\u3092\u5f97\u308b\u6f14\u7b97, \\(e(h, h')\\) \u306f\u624b\u724c \\(h\\) \u304b\u3089\u624b\u724c \\(h'\\) \u306b\u5909\u5316\u3059\u308b\u305f\u3081\u306e\u724c\u306e\u679a\u6570\u3067\u3042\u308b. \u5883\u754c\u6761\u4ef6\u306f\u548c\u4e86\u3057\u3066\u3044\u308b\u624b\u724c\u306e\u96c6\u5408\u3092 \\(W \\subset H_2\\) \u3068\u3057\u3066 \\[ p^h_u = \\left\\{ \\begin{aligned} & 1 & (h \\in W) \\\\ & 0 & (h \\notin W) \\end{aligned} \\right. \\quad (0 \\le u \\le t) \\tag{7} \\] \u3067\u3042\u308b. \u4ee5\u4e0b(6)\u5f0f\u306b\u3064\u3044\u3066\u8003\u5bdf\u3059\u308b. \u7de9\u548c\u9806 \u00b6 \u6dfb\u5b57\u304c\u624b\u724c\u65b9\u5411\u3068\u5de1\u76ee\u65b9\u5411\u3068 2 \u3064\u3042\u308b\u305f\u3081, \u3069\u3061\u3089\u3092\u30eb\u30fc\u30d7\u306e\u5916\u5074\u306b\u3059\u308b\u306e\u304b\u304c\u554f\u984c\u306b\u306a\u308b. \u624b\u724c\u5909\u5316\u306e\u30b0\u30e9\u30d5\u3092\u898b\u308b\u3068\u5de1\u76ee\u65b9\u5411\u304c\u30c8\u30dd\u30ed\u30b8\u30ab\u30eb\u9806\u5e8f\u306b\u306a\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u305f\u3081, \u5de1\u76ee\u3092\u30eb\u30fc\u30d7\u306e\u5916\u5074\u306b\u3059\u308c\u3070\u3088\u3044. \u3053\u3053\u3067\u624b\u724c\u5909\u5316\u306e\u30b0\u30e9\u30d5\u304b\u3089\u8d64\u8272\u306e\u77e2\u5370\u304c\u306a\u3044\u3068\u3059\u308b\u3068\u624b\u724c\u65b9\u5411\u3082\u30c8\u30dd\u30ed\u30b8\u30ab\u30eb\u9806\u5e8f\u306b\u306a\u308b. \u3053\u306e\u5834\u5408\u518d\u5e30\u7684\u306b\u624b\u724c\u3092\u63a2\u7d22\u3057\u306a\u304c\u3089\u5404\u5de1\u76ee\u3067\u306e\u548c\u4e86\u78ba\u7387\u3092\u8a08\u7b97\u3067\u304d\u8a08\u7b97\u901f\u5ea6\u30fb\u30e1\u30e2\u30ea\u52b9\u7387\u3068\u3082\u306b\u5411\u4e0a\u3059\u308b. \u8fba\u306e\u91cd\u307f \u00b6 \u8fba\u306e\u91cd\u307f \\(e(h, h')\\) \u3092\u5de1\u76ee\u306b\u3088\u3089\u305a\u56fa\u5b9a\u3068\u3057\u3066\u3088\u3044\u306e\u304b\u306f, \u548c\u4e86\u78ba\u7387\u3092\u6700\u5927\u306b\u3059\u308b\u6253\u724c\u3092\u3059\u308b\u5834\u5408 2 \u56de\u4ee5\u4e0a\u540c\u3058\u624b\u724c\u3092\u8a2a\u554f\u3057\u306a\u3044\u305f\u3081\u56fa\u5b9a\u3068\u3057\u3066\u3088\u3044. \u4e0d\u6574\u5408 \u00b6 \\(\\sum_{h' \\in \\mathrm{adj}(h)} e(h, h') > S - u\\) (\u305f\u3060\u3057 \\(p^{h'}_{u+1} > p^h_{u+1}\\) )\u3068\u306a\u308b\u5de1\u76ee\u3067 \\(p^h_u\\) \u3092\u78ba\u7387\u3068\u3057\u3066\u89e3\u91c8\u3067\u304d\u306a\u304f\u306a\u308b. \u3057\u304b\u3057, \u3053\u306e\u3068\u304d\u5bfe\u5fdc\u3059\u308b\u5b58\u5728\u78ba\u7387\u306f 0 \u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3053\u306e\u72b6\u614b\u304c\u9014\u4e2d\u306e\u72b6\u614b\u3068\u306a\u308b\u3053\u3068\u306f\u306a\u3044. \u305f\u3060\u3057(6)\u5f0f\u306e\u7b2c 2 \u5f0f\u3067\u3053\u306e\u72b6\u614b\u304c\u9078\u629e\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u5de5\u592b\u3059\u308b\u304b, \u4e00\u5ea6\u6368\u3066\u305f\u724c\u306f\u5c71\u306b\u623b\u308b\u3068\u4eee\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b. \u5f97\u70b9\u671f\u5f85\u5024 \u00b6 \u548c\u4e86\u78ba\u7387\u3067\u306f\u306a\u304f\u5f97\u70b9\u671f\u5f85\u5024\u3092\u6c42\u3081\u308b\u5834\u5408, \u57fa\u672c\u7684\u306b\u306f(6)\u5f0f\u3067\u548c\u4e86\u78ba\u7387 \\(p^h_u\\) \u3092\u5f97\u70b9\u671f\u5f85\u5024 \\(s^h_u\\) \u306b\u7f6e\u304d\u63db\u3048\u308c\u3070\u3088\u3044. \u305f\u3060\u3057\u6ce8\u610f\u70b9\u304c 2 \u70b9\u3042\u308b. 1 \u70b9\u76ee\u306f\u5f97\u70b9\u306f\u548c\u4e86\u306e\u72b6\u614b\u306b\u4ed8\u5c5e\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u8074\u724c\u304b\u3089\u548c\u4e86\u3078\u5411\u304b\u3046\u8fba\u306b\u91cd\u307f\u3068\u3057\u3066\u4ed8\u5c5e\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b. \u3064\u307e\u308a\u8fba\u306f\u6709\u52b9\u724c\u306e\u679a\u6570\u3068\u5f97\u70b9\u306e 2 \u7a2e\u985e\u306e\u91cd\u307f\u3092\u3082\u3064\u3053\u3068\u306b\u306a\u308b. 2 \u70b9\u76ee\u306f\u548c\u4e86\u306e\u72b6\u614b\u306b\u5230\u9054\u3057\u305f\u3068\u3057\u3066\u548c\u4e86\u3092\u5ba3\u8a00\u3059\u308b\u304b\u5c40\u3092\u7d9a\u884c\u3059\u308b\u304b\u9078\u629e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b. \u3053\u308c\u3089\u306b\u6ce8\u610f\u3057\u3066\u5f97\u70b9\u671f\u5f85\u5024\u3092\u8868\u3059\u6f38\u5316\u5f0f\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b. \\[ s^h_u = \\left\\{ \\begin{aligned} & s^h_{u+1} + \\sum_{h' \\in \\mathrm{adj}(h)} \\frac{e_1(h, h')}{S-u} \\left( \\max \\left\\{e_2(h, h'),\\ s^{h'}_{u+1} \\right\\} - s^h_{u+1} \\right) & (h \\in H_1) \\\\ & \\max_{h' \\in \\mathrm{adj}(h)} \\left\\{ s^{h'}_u \\right\\} & (h \\in H_2) \\end{aligned} \\right. \\tag{8} \\] \u3053\u3053\u3067 \\(e_1(h, h')\\) \u306f\u6709\u52b9\u724c\u306e\u679a\u6570, \\(e_2(h, h')\\) \u306f\u5f97\u70b9\u3092\u8868\u3059. \\(e_2(h, h')\\) \u306f\u624b\u724c \\(h'\\) \u304c\u548c\u4e86\u306e\u3068\u304d\u3060\u3051 0 \u4ee5\u5916\u306e\u5024\u3092\u3082\u3061, \u305d\u308c\u4ee5\u5916\u3067\u306f 0 \u3068\u306a\u308b. \u306a\u304a\u521d\u671f\u6761\u4ef6\u306f \\[ s^h_u = 0 \\quad (0 \\le u \\le t) \\tag{9} \\] \u3067\u3042\u308b. \u548c\u4e86\u78ba\u7387\u306e\u8868\u5f0f \u00b6 (2)\u5f0f\u306e\u89e3\u306e\u8868\u5f0f\u306f B. \u548c\u4e86\u78ba\u7387\u306e\u8868\u5f0f \u3092\u53c2\u7167\u3059\u308b\u3053\u3068. \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u00b6 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f mahjong-win-prob \u3092\u53c2\u7167\u3059\u308b\u3053\u3068. \u4e03\u5bfe\u5b50\u30fb\u56fd\u58eb\u7121\u53cc\u306e\u8074\u724c\u78ba\u7387 \u00b6 \u4e03\u5bfe\u5b50\u30fb\u56fd\u58eb\u7121\u53cc\u306e\u8074\u724c\u78ba\u7387\u306f\u6709\u52b9\u724c\u306e\u679a\u6570\u306e\u5909\u5316\u304c\u6570\u901a\u308a\u306b\u9650\u3089\u308c\u308b\u305f\u3081\u5bb9\u6613\u306b\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b. \u4e03\u5bfe\u5b50\u306e\u8074\u724c\u78ba\u7387\u306f chitoi.cpp , \u56fd\u58eb\u7121\u53cc\u306e\u8074\u724c\u78ba\u7387\u306f kokushi.cpp \u3092\u53c2\u7167\u3059\u308b\u3053\u3068.","title":"6. \u548c\u4e86\u78ba\u7387"},{"location":"probability/#_1","text":"","title":"\u548c\u4e86\u78ba\u7387"},{"location":"probability/#_2","text":"\u3042\u308b\u624b\u724c\u304c\u4e0e\u3048\u3089\u308c, \u3069\u306e\u3088\u3046\u306b\u548c\u4e86\u306b\u5411\u304b\u3063\u3066\u3082\u6709\u52b9\u724c\u306e\u679a\u6570\u306e\u5909\u5316\u304c 1 \u901a\u308a\u3067\u3042\u308b\u3068\u3059\u308b. \u3053\u3053\u3067\u548c\u4e86\u5f62\u306f 1 \u901a\u308a\u3067\u306a\u304f\u3066\u3082\u3088\u3044. \u3053\u306e\u624b\u724c\u306e\u7f6e\u63db\u6570\u3092 \\(d\\) , \u6709\u52b9\u724c\u306e\u679a\u6570\u3092 \\(a_0\\) \u3068\u3059\u308b. \u3053\u306e\u72b6\u614b\u304b\u3089\u6709\u52b9\u724c\u3092 1 \u679a\u5f15\u304f\u3054\u3068\u306b\u7f6e\u63db\u6570\u304c 1 \u305a\u3064\u6e1b\u5c11\u3057\u6700\u7d42\u7684\u306b 0 \u306b\u306a\u308b\u304c, \u3053\u306e\u904e\u7a0b\u3067\u6709\u52b9\u724c\u306e\u679a\u6570\u304c \\(a_0, a_1, \\ldots , a_{d-1}\\) \u3068\u5909\u5316\u3059\u308b. \u624b\u724c\u306e\u7f6e\u63db\u6570\u304c \\(d\\) \u306e\u3082\u306e\u304b\u3089 \\(0\\) \u306e\u3082\u306e\u307e\u3067\u306e \\(d+1\\) \u500b\u306e\u72b6\u614b\u304c\u5b58\u5728\u3059\u308b\u304b\u3089, \u5404\u72b6\u614b\u9593\u306e\u9077\u79fb\u3092\u8868\u3059\u78ba\u7387\u884c\u5217 \\(A_u\\) \u3092\u8003\u3048\u308c\u3070\u548c\u4e86\u78ba\u7387\u3092\u8868\u305b\u308b. \\[ A_u = \\begin{pmatrix} 1-\\frac{a_0}{S-u} & 0 & \\dots & 0 & 0 \\\\ \\frac{a_0}{S-u} & 1-\\frac{a_1}{S-u} & \\dots & 0 & 0 \\\\ \\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\ 0 & 0 & \\dots & 1-\\frac{a_{d-1}}{S-u} & 0 \\\\ 0 & 0 & \\dots & \\frac{a_{d-1}}{S-u} & 1-\\frac{a_d}{S-u} \\\\ \\end{pmatrix} \\tag{1} \\] (1)\u5f0f\u3067 \\(u\\) \u306f\u5de1\u76ee, \\(S\\) \u306f 0 \u5de1\u76ee\u3067\u306e\u724c\u306e\u7dcf\u6570\u3092\u8868\u3059. \u307e\u305f \\(a_d = 0\\) \u3068\u3059\u308b. \\(t\\) \u5de1\u76ee\u306b\u304a\u3051\u308b\u548c\u4e86\u78ba\u7387 \\(p_t\\) \u306f \\[ p_t = {}^t \\boldsymbol{e}_d A_{t-1} A_{t-2} \\cdots A_1 A_0 \\boldsymbol{e}_0 \\tag{2} \\] \u3068\u66f8\u3051\u308b(\u884c\u5217\u3084\u30d9\u30af\u30c8\u30eb\u306e\u6dfb\u5b57\u306e\u59cb\u307e\u308a\u304c 0 \u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f). (2)\u5f0f\u3092\u8a08\u7b97\u3059\u308b\u65b9\u6cd5\u306f 2 \u901a\u308a\u3042\u308a, \u2460 \\(\\boldsymbol{e}_0\\) \u306b\u5de6\u304b\u3089 \\(A_u\\) \u3092\u7e70\u308a\u8fd4\u3057\u4f5c\u7528\u3055\u305b\u308b\u65b9\u6cd5\u3068 \u2461 \\({}^t \\boldsymbol{e}_d\\) \u306b\u53f3\u304b\u3089 \\(A_u\\) \u3092\u7e70\u308a\u8fd4\u3057\u4f5c\u7528\u3055\u305b\u308b\u65b9\u6cd5\u304c\u3042\u308b. \u305d\u308c\u305e\u308c\u306e\u65b9\u6cd5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u308b. \\[ \\boldsymbol{q}_0 = \\boldsymbol{e}_0,\\ \\boldsymbol{q}_{u+1} = A_u \\boldsymbol{q}_u \\tag{3} \\] \\[ \\boldsymbol{p}_t = \\boldsymbol{e}_d,\\ {}^t\\boldsymbol{p}_u = {}^t\\boldsymbol{p}_{u+1} A_u \\tag{4} \\] \\(\\boldsymbol{q}_u\\) \u306f \\(u\\) \u5de1\u76ee\u3067\u306e\u5404\u72b6\u614b\u306e\u5b58\u5728\u78ba\u7387\u3092\u8868\u3057, \\(\\boldsymbol{p}_u\\) \u306f \\(u\\) \u5de1\u76ee\u3067\u306e\u5404\u72b6\u614b\u306e\u548c\u4e86\u78ba\u7387\u3092\u8868\u3059. \u5b58\u5728\u78ba\u7387\u3068\u548c\u4e86\u78ba\u7387\u306e\u95a2\u4fc2\u306f\u4ee5\u4e0b\u306e\u5f0f\u3067\u8868\u305b\u308b. \\[ p_t = {}^t\\boldsymbol{p}_u \\boldsymbol{q}_u = {}^t\\boldsymbol{p}_0 \\boldsymbol{e}_0 = {}^t\\boldsymbol{e}_d \\boldsymbol{q}_t \\tag{5} \\] \u3053\u306e\u4f8b\u306e\u3088\u3046\u306b\u6709\u52b9\u724c\u306e\u679a\u6570\u306e\u5909\u5316\u304c 1 \u901a\u308a\u3067\u3042\u308c\u3070\u3069\u3061\u3089\u306e\u65b9\u6cd5\u3082\u4f7f\u3048\u308b\u304c, \u305d\u3046\u3067\u306f\u306a\u3044\u5834\u5408\u548c\u4e86\u3078\u5411\u304b\u3046\u9014\u4e2d\u306e\u72b6\u614b\u306e\u548c\u4e86\u78ba\u7387\u3092\u6700\u5927\u5316\u3059\u308b\u6253\u724c\u3092\u9078\u629e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u5f8c\u8005\u306e\u65b9\u6cd5\u3057\u304b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u306a\u3044.","title":"\u6709\u52b9\u724c\u306e\u679a\u6570\u306e\u5909\u5316\u306b\u5206\u5c90\u304c\u306a\u3044\u5834\u5408"},{"location":"probability/#_3","text":"\u6709\u52b9\u724c\u306e\u679a\u6570\u306e\u5909\u5316\u304c 1 \u901a\u308a\u3067\u306f\u306a\u304f\u5f15\u3044\u305f\u724c\u306b\u5fdc\u3058\u3066\u5206\u5c90\u3059\u308b\u5834\u5408\u3092\u8003\u3048\u308b. \u548c\u4e86\u3078\u5411\u304b\u3046\u624b\u724c\u306e\u5909\u5316\u3092\u8868\u3059\u6709\u52b9\u975e\u5de1\u56de\u30b0\u30e9\u30d5(DAG, \u4ee5\u964d\u624b\u724c\u5909\u5316\u306e\u30b0\u30e9\u30d5\u3068\u547c\u3076)\u3092\u5c0e\u5165\u3059\u308b. \u56f31: \u624b\u724c\u5909\u5316\u306e\u30b0\u30e9\u30d5(\u9ed2\u5b9f\u7dda\u306f\u6709\u52b9\u724c\u306e\u81ea\u6478, \u9ed2\u7834\u7dda\u306f\u4e0d\u8981\u724c\u306e\u6253\u724c, \u8d64\u5b9f\u7dda\u306f\u624b\u66ff\u308f\u308a, \u8d64\u7834\u7dda\u306f\u5411\u8074\u623b\u3057\u3092\u8868\u3059) \u3053\u308c\u306f\u624b\u724c\u65b9\u5411\u3068\u5de1\u76ee\u65b9\u5411\u306e 2 \u3064\u306e\u65b9\u5411\u3078\u306e\u5e83\u304c\u308a\u3092\u6301\u3064\u30b0\u30e9\u30d5\u3067\u3042\u308b. \u5404\u9802\u70b9\u304c\u5404\u624b\u724c, \u5404\u5de1\u76ee\u306e\u548c\u4e86\u78ba\u7387\u3092\u8868\u3059. \u756a\u53f7\u304c\u540c\u3058\u9802\u70b9\u3069\u3046\u3057\u306f\u624b\u724c\u3068\u3057\u3066\u306f\u540c\u3058(\u5de1\u76ee\u304c\u7570\u306a\u308b)\u3067\u3042\u308b. \u306a\u304a\u7c21\u5358\u306e\u305f\u3081 0, 1 \u5de1\u76ee\u306e\u72b6\u614b\u3057\u304b\u793a\u3057\u3066\u3044\u306a\u3044. \u5148\u8ff0\u306e\u3088\u3046\u306b\u548c\u4e86\u78ba\u7387\u3092\u6c42\u3081\u308b\u306b\u306f\u5404\u72b6\u614b\u306e\u548c\u4e86\u78ba\u7387\u3092\u77e5\u3089\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u305f\u3081, \u52d5\u7684\u8a08\u753b\u6cd5(DP)\u3092\u4f7f\u3063\u3066\u8a08\u7b97\u3059\u308b\u969b\u306f\u77e2\u5370\u306e\u5411\u304d\u3092\u9006\u5411\u304d\u306b\u305f\u3069\u3063\u3066\u5404\u72b6\u614b\u3092\u8a2a\u554f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b. \u3053\u3053\u3067 \\(3n+1\\) \u679a\u306e\u624b\u724c\u306e\u96c6\u5408\u3092 \\(H_1\\) , \\(3n+2\\) \u679a\u306e\u624b\u724c\u306e\u96c6\u5408\u3092 \\(H_2\\) , \u5de1\u76ee\u3092 \\(u\\) \u3068\u3057\u3066\u5404\u72b6\u614b\u306e\u548c\u4e86\u78ba\u7387\u306f\u4ee5\u4e0b\u306e\u6f38\u5316\u5f0f\u3067\u8868\u305b\u308b. \\[ p^h_u = \\left\\{ \\begin{aligned} & p^h_{u+1} + \\sum_{h' \\in \\mathrm{adj}(h)} \\frac{e(h, h')}{S-u} (p^{h'}_{u+1} - p^h_{u+1}) & (h \\in H_1) \\\\ & \\max_{h' \\in \\mathrm{adj}(h)} \\left\\{ p^{h'}_u \\right\\} & (h \\in H_2) \\end{aligned} \\right. \\tag{6} \\] (6)\u5f0f\u3067 \\(\\mathrm{adj}(h)\\) \u306f\u96a3\u63a5\u3059\u308b\u624b\u724c\u306e\u96c6\u5408\u3092\u5f97\u308b\u6f14\u7b97, \\(e(h, h')\\) \u306f\u624b\u724c \\(h\\) \u304b\u3089\u624b\u724c \\(h'\\) \u306b\u5909\u5316\u3059\u308b\u305f\u3081\u306e\u724c\u306e\u679a\u6570\u3067\u3042\u308b. \u5883\u754c\u6761\u4ef6\u306f\u548c\u4e86\u3057\u3066\u3044\u308b\u624b\u724c\u306e\u96c6\u5408\u3092 \\(W \\subset H_2\\) \u3068\u3057\u3066 \\[ p^h_u = \\left\\{ \\begin{aligned} & 1 & (h \\in W) \\\\ & 0 & (h \\notin W) \\end{aligned} \\right. \\quad (0 \\le u \\le t) \\tag{7} \\] \u3067\u3042\u308b. \u4ee5\u4e0b(6)\u5f0f\u306b\u3064\u3044\u3066\u8003\u5bdf\u3059\u308b.","title":"\u6709\u52b9\u724c\u306e\u679a\u6570\u306e\u5909\u5316\u306b\u5206\u5c90\u304c\u3042\u308b\u5834\u5408"},{"location":"probability/#_4","text":"\u6dfb\u5b57\u304c\u624b\u724c\u65b9\u5411\u3068\u5de1\u76ee\u65b9\u5411\u3068 2 \u3064\u3042\u308b\u305f\u3081, \u3069\u3061\u3089\u3092\u30eb\u30fc\u30d7\u306e\u5916\u5074\u306b\u3059\u308b\u306e\u304b\u304c\u554f\u984c\u306b\u306a\u308b. \u624b\u724c\u5909\u5316\u306e\u30b0\u30e9\u30d5\u3092\u898b\u308b\u3068\u5de1\u76ee\u65b9\u5411\u304c\u30c8\u30dd\u30ed\u30b8\u30ab\u30eb\u9806\u5e8f\u306b\u306a\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u305f\u3081, \u5de1\u76ee\u3092\u30eb\u30fc\u30d7\u306e\u5916\u5074\u306b\u3059\u308c\u3070\u3088\u3044. \u3053\u3053\u3067\u624b\u724c\u5909\u5316\u306e\u30b0\u30e9\u30d5\u304b\u3089\u8d64\u8272\u306e\u77e2\u5370\u304c\u306a\u3044\u3068\u3059\u308b\u3068\u624b\u724c\u65b9\u5411\u3082\u30c8\u30dd\u30ed\u30b8\u30ab\u30eb\u9806\u5e8f\u306b\u306a\u308b. \u3053\u306e\u5834\u5408\u518d\u5e30\u7684\u306b\u624b\u724c\u3092\u63a2\u7d22\u3057\u306a\u304c\u3089\u5404\u5de1\u76ee\u3067\u306e\u548c\u4e86\u78ba\u7387\u3092\u8a08\u7b97\u3067\u304d\u8a08\u7b97\u901f\u5ea6\u30fb\u30e1\u30e2\u30ea\u52b9\u7387\u3068\u3082\u306b\u5411\u4e0a\u3059\u308b.","title":"\u7de9\u548c\u9806"},{"location":"probability/#_5","text":"\u8fba\u306e\u91cd\u307f \\(e(h, h')\\) \u3092\u5de1\u76ee\u306b\u3088\u3089\u305a\u56fa\u5b9a\u3068\u3057\u3066\u3088\u3044\u306e\u304b\u306f, \u548c\u4e86\u78ba\u7387\u3092\u6700\u5927\u306b\u3059\u308b\u6253\u724c\u3092\u3059\u308b\u5834\u5408 2 \u56de\u4ee5\u4e0a\u540c\u3058\u624b\u724c\u3092\u8a2a\u554f\u3057\u306a\u3044\u305f\u3081\u56fa\u5b9a\u3068\u3057\u3066\u3088\u3044.","title":"\u8fba\u306e\u91cd\u307f"},{"location":"probability/#_6","text":"\\(\\sum_{h' \\in \\mathrm{adj}(h)} e(h, h') > S - u\\) (\u305f\u3060\u3057 \\(p^{h'}_{u+1} > p^h_{u+1}\\) )\u3068\u306a\u308b\u5de1\u76ee\u3067 \\(p^h_u\\) \u3092\u78ba\u7387\u3068\u3057\u3066\u89e3\u91c8\u3067\u304d\u306a\u304f\u306a\u308b. \u3057\u304b\u3057, \u3053\u306e\u3068\u304d\u5bfe\u5fdc\u3059\u308b\u5b58\u5728\u78ba\u7387\u306f 0 \u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3053\u306e\u72b6\u614b\u304c\u9014\u4e2d\u306e\u72b6\u614b\u3068\u306a\u308b\u3053\u3068\u306f\u306a\u3044. \u305f\u3060\u3057(6)\u5f0f\u306e\u7b2c 2 \u5f0f\u3067\u3053\u306e\u72b6\u614b\u304c\u9078\u629e\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u5de5\u592b\u3059\u308b\u304b, \u4e00\u5ea6\u6368\u3066\u305f\u724c\u306f\u5c71\u306b\u623b\u308b\u3068\u4eee\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b.","title":"\u4e0d\u6574\u5408"},{"location":"probability/#_7","text":"\u548c\u4e86\u78ba\u7387\u3067\u306f\u306a\u304f\u5f97\u70b9\u671f\u5f85\u5024\u3092\u6c42\u3081\u308b\u5834\u5408, \u57fa\u672c\u7684\u306b\u306f(6)\u5f0f\u3067\u548c\u4e86\u78ba\u7387 \\(p^h_u\\) \u3092\u5f97\u70b9\u671f\u5f85\u5024 \\(s^h_u\\) \u306b\u7f6e\u304d\u63db\u3048\u308c\u3070\u3088\u3044. \u305f\u3060\u3057\u6ce8\u610f\u70b9\u304c 2 \u70b9\u3042\u308b. 1 \u70b9\u76ee\u306f\u5f97\u70b9\u306f\u548c\u4e86\u306e\u72b6\u614b\u306b\u4ed8\u5c5e\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u8074\u724c\u304b\u3089\u548c\u4e86\u3078\u5411\u304b\u3046\u8fba\u306b\u91cd\u307f\u3068\u3057\u3066\u4ed8\u5c5e\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b. \u3064\u307e\u308a\u8fba\u306f\u6709\u52b9\u724c\u306e\u679a\u6570\u3068\u5f97\u70b9\u306e 2 \u7a2e\u985e\u306e\u91cd\u307f\u3092\u3082\u3064\u3053\u3068\u306b\u306a\u308b. 2 \u70b9\u76ee\u306f\u548c\u4e86\u306e\u72b6\u614b\u306b\u5230\u9054\u3057\u305f\u3068\u3057\u3066\u548c\u4e86\u3092\u5ba3\u8a00\u3059\u308b\u304b\u5c40\u3092\u7d9a\u884c\u3059\u308b\u304b\u9078\u629e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b. \u3053\u308c\u3089\u306b\u6ce8\u610f\u3057\u3066\u5f97\u70b9\u671f\u5f85\u5024\u3092\u8868\u3059\u6f38\u5316\u5f0f\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b. \\[ s^h_u = \\left\\{ \\begin{aligned} & s^h_{u+1} + \\sum_{h' \\in \\mathrm{adj}(h)} \\frac{e_1(h, h')}{S-u} \\left( \\max \\left\\{e_2(h, h'),\\ s^{h'}_{u+1} \\right\\} - s^h_{u+1} \\right) & (h \\in H_1) \\\\ & \\max_{h' \\in \\mathrm{adj}(h)} \\left\\{ s^{h'}_u \\right\\} & (h \\in H_2) \\end{aligned} \\right. \\tag{8} \\] \u3053\u3053\u3067 \\(e_1(h, h')\\) \u306f\u6709\u52b9\u724c\u306e\u679a\u6570, \\(e_2(h, h')\\) \u306f\u5f97\u70b9\u3092\u8868\u3059. \\(e_2(h, h')\\) \u306f\u624b\u724c \\(h'\\) \u304c\u548c\u4e86\u306e\u3068\u304d\u3060\u3051 0 \u4ee5\u5916\u306e\u5024\u3092\u3082\u3061, \u305d\u308c\u4ee5\u5916\u3067\u306f 0 \u3068\u306a\u308b. \u306a\u304a\u521d\u671f\u6761\u4ef6\u306f \\[ s^h_u = 0 \\quad (0 \\le u \\le t) \\tag{9} \\] \u3067\u3042\u308b.","title":"\u5f97\u70b9\u671f\u5f85\u5024"},{"location":"probability/#_8","text":"(2)\u5f0f\u306e\u89e3\u306e\u8868\u5f0f\u306f B. \u548c\u4e86\u78ba\u7387\u306e\u8868\u5f0f \u3092\u53c2\u7167\u3059\u308b\u3053\u3068.","title":"\u548c\u4e86\u78ba\u7387\u306e\u8868\u5f0f"},{"location":"probability/#_9","text":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f mahjong-win-prob \u3092\u53c2\u7167\u3059\u308b\u3053\u3068.","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"probability/#_10","text":"\u4e03\u5bfe\u5b50\u30fb\u56fd\u58eb\u7121\u53cc\u306e\u8074\u724c\u78ba\u7387\u306f\u6709\u52b9\u724c\u306e\u679a\u6570\u306e\u5909\u5316\u304c\u6570\u901a\u308a\u306b\u9650\u3089\u308c\u308b\u305f\u3081\u5bb9\u6613\u306b\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b. \u4e03\u5bfe\u5b50\u306e\u8074\u724c\u78ba\u7387\u306f chitoi.cpp , \u56fd\u58eb\u7121\u53cc\u306e\u8074\u724c\u78ba\u7387\u306f kokushi.cpp \u3092\u53c2\u7167\u3059\u308b\u3053\u3068.","title":"\u4e03\u5bfe\u5b50\u30fb\u56fd\u58eb\u7121\u53cc\u306e\u8074\u724c\u78ba\u7387"},{"location":"shanten/","text":"\u914d\u724c\u6642\u5411\u8074\u6570 \u00b6 \u6982\u8981 \u00b6 \u3059\u3079\u3066\u306e\u624b\u724c\u306b\u3064\u3044\u3066\u5411\u8074\u6570\u3092\u8a08\u7b97\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u8a08\u7b97\u91cf\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3057\u307e\u3046. \u4e8b\u524d\u306b\u6570\u724c\u3068\u5b57\u724c\u306e\u5411\u8074\u6570\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3064\u3044\u3066\u96c6\u7d04\u3057, \u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3044\u304f\u3064\u5b58\u5728\u3059\u308b\u304b\u3092\u30e1\u30e2\u3057\u3066\u304a\u304f. \u624b\u724c\u306e\u679a\u6570\u304c\u4e88\u3081\u6c7a\u3081\u3089\u308c\u305f\u6570\u306b\u306a\u308b\u3088\u3046\u306a\u3059\u3079\u3066\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5168\u63a2\u7d22\u3059\u308b. \u3053\u306e\u3068\u304d\u5411\u8074\u6570\u3092\u8a08\u7b97\u3057\u306a\u304c\u3089\u540c\u3058\u5411\u8074\u6570\u3068\u306a\u308b\u624b\u724c\u306e\u6570\u3082\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u8a08\u7b97\u91cf\u3092\u5c0f\u3055\u304f\u3067\u304d\u308b. \u307e\u305f, \u6570\u724c\u306e\u8272\u3069\u3046\u3057\u3092\u5165\u308c\u66ff\u3048\u3066\u3082\u5411\u8074\u6570\u306f\u5909\u308f\u3089\u306a\u3044\u4e8b\u5b9f\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3055\u3089\u306b\u8a08\u7b97\u91cf\u3092\u5c0f\u3055\u304f\u3067\u304d\u308b. \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u00b6 \u4ee5\u4e0b\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u306f, shanten-number \u304b\u3089\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30d5\u30a1\u30a4\u30eb( index_s.txt \u3068 index_h.txt )\u3092\u5165\u624b\u3057\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3059\u308b\u3053\u3068. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 #include <chrono> #include <fstream> #include <functional> #include <iostream> #include <unordered_map> #include <numeric> #include <valarray> #include <vector> #include <boost/container_hash/hash.hpp> using Vec = std :: vector < int > ; using Iter = std :: vector < Vec >:: iterator ; struct Key ; struct Hash ; using Keys = std :: unordered_map < Key , int , Hash > ; struct Key { // \u8ddd\u96e2\u30c6\u30fc\u30d6\u30eb\u3078\u306e\u30a4\u30c6\u30ec\u30fc\u30bf Iter itr ; // \u624b\u724c\u306e\u30d1\u30bf\u30fc\u30f3\u6570 long long dens ; // \u4e03\u5bfe\u5b50\u3092\u69cb\u6210\u3059\u308b\u724c\u306e\u7a2e\u985e\u6570 int kind_sp ; // \u4e03\u5bfe\u5b50\u3092\u69cb\u6210\u3059\u308b\u5bfe\u5b50\u306e\u7a2e\u985e\u6570 int pair_sp ; // \u56fd\u58eb\u7121\u53cc\u3092\u69cb\u6210\u3059\u308b\u724c\u306e\u7a2e\u985e\u6570 int kind_to ; // \u56fd\u58eb\u7121\u53cc\u3092\u69cb\u6210\u3059\u308b\u5bfe\u5b50\u306e\u7a2e\u985e\u6570 int pair_to ; }; struct Hash { std :: size_t operator ()( const Key & key ) const { using boost :: hash_combine ; using boost :: hash_range ; std :: size_t seed = 0 ; hash_combine ( seed , hash_range ( key . itr -> begin (), key . itr -> end ())); hash_combine ( seed , key . dens ); hash_combine ( seed , key . kind_sp ); hash_combine ( seed , key . pair_sp ); hash_combine ( seed , key . kind_to ); hash_combine ( seed , key . kind_sp ); return seed ; } }; bool operator == ( const Key & lhs , const Key & rhs ) { return * lhs . itr == * rhs . itr && lhs . dens == rhs . dens && lhs . kind_sp == rhs . kind_sp && lhs . pair_sp == rhs . pair_sp && lhs . kind_to == rhs . kind_to && lhs . pair_to == rhs . pair_to ; } void add1 ( Vec & lhs , const Vec & rhs , const int m ) { for ( int j = m + 5 ; j >= 5 ; -- j ) { int sht = std :: min ( lhs [ j ] + rhs [ 0 ], lhs [ 0 ] + rhs [ j ]); for ( int k = 5 ; k < j ; ++ k ) { sht = std :: min ({ sht , lhs [ k ] + rhs [ j - k ], lhs [ j - k ] + rhs [ k ]}); } lhs [ j ] = sht ; } for ( int j = m ; j >= 0 ; -- j ) { int sht = lhs [ j ] + rhs [ 0 ]; for ( int k = 0 ; k < j ; ++ k ) { sht = std :: min ( sht , lhs [ k ] + rhs [ j - k ]); } lhs [ j ] = sht ; } } void add2 ( Vec & lhs , const Vec & rhs , const int m ) { int j = m + 5 ; int sht = std :: min ( lhs [ j ] + rhs [ 0 ], lhs [ 0 ] + rhs [ j ]); for ( int k = 5 ; k < j ; ++ k ) { sht = std :: min ({ sht , lhs [ k ] + rhs [ j - k ], lhs [ j - k ] + rhs [ k ]}); } lhs [ j ] = sht ; } void read_file ( Iter first , const Iter last , const char * file ) { std :: ifstream fin ( file ); int tmp ; for (; first != last ; ++ first ) { for ( int j = 0 ; j < 10 ; ++ j ) { fin >> tmp ; ( * first )[ j ] = tmp ; } } } // \u624b\u724c\u751f\u6210(\u5168\u5e45) template < bool IsHonor > void generate ( int n , int m , std :: vector < Vec >& table , Keys & keys ) { // \u7d44\u307f\u5408\u308f\u305b(4Cr) static const Vec c = { 1 , 4 , 6 , 4 , 1 }; static constexpr int N = IsHonor ? 7 : 9 ; static Vec quin ( N + 1 ); static Vec dens ( N + 1 , 1 ); static Vec kind_sp ( N + 1 ); static Vec pair_sp ( N + 1 ); static Vec kind_to ( N + 1 ); static Vec pair_to ( N + 1 ); if ( n == N ) { const Key key { std :: next ( table . begin (), quin [ N ]), dens [ N ], kind_sp [ N ], pair_sp [ N ], kind_to [ N ], pair_to [ N ]}; if ( auto itr = keys . find ( key ); itr == keys . end ()) { keys . emplace ( key , 1 ); } else { ++ itr -> second ; } } else { for ( int i = std :: max ( 0 , m - 4 * ( N - 1 - n )); i <= std :: min ( 4 , m ); ++ i ) { quin [ n + 1 ] = quin [ n ] * 5 + i ; dens [ n + 1 ] = dens [ n ] * c [ i ]; kind_sp [ n + 1 ] = kind_sp [ n ] + ( i > 0 ? 1 : 0 ); pair_sp [ n + 1 ] = pair_sp [ n ] + ( i >= 2 ? 1 : 0 ); kind_to [ n + 1 ] = kind_to [ n ] + (( IsHonor || n == 0 || n == N - 1 ) && i > 0 ? 1 : 0 ); pair_to [ n + 1 ] = pair_to [ n ] + (( IsHonor || n == 0 || n == N - 1 ) && i >= 2 ? 1 : 0 ); generate < IsHonor > ( n + 1 , m - i , table , keys ); } } } inline int coef ( const int i , const int j , const int k ) { if ( i == j && j == k ) { return 1 ; } else if ( i == j || j == k || k == i ) { return 3 ; } else { return 6 ; } } int main () { constexpr int M = 14 ; const auto start = std :: chrono :: system_clock :: now (); std :: vector < Vec > mp1 ( 1953125 , Vec ( 10 )); std :: vector < Vec > mp2 ( 78125 , Vec ( 10 )); read_file ( mp1 . begin (), mp1 . end (), \"index_s.txt\" ); read_file ( mp2 . begin (), mp2 . end (), \"index_h.txt\" ); std :: vector < Keys > keys1 ( M + 1 ); std :: vector < Keys > keys2 ( M + 1 ); for ( int m = 0 ; m <= M ; ++ m ) { generate < false > ( 0 , m , mp1 , keys1 [ m ]); generate < true > ( 0 , m , mp2 , keys2 [ m ]); } std :: valarray < long long > cnt ( 8 ); for ( int i = 0 ; i <= M ; ++ i ) { for ( int j = i ; j <= M - i ; ++ j ) { for ( int k = j ; k <= M - i - j ; ++ k ) { std :: valarray < long long > tmp ( 8 ); for ( const auto & [ key0 , value0 ] : keys1 [ i ]) { for ( const auto & [ key1 , value1 ] : keys1 [ j ]) { for ( const auto & [ key2 , value2 ] : keys1 [ k ]) { for ( const auto & [ key3 , value3 ] : keys2 [ M - i - j - k ]) { Vec lhs = * key0 . itr ; add1 ( lhs , * key1 . itr , M / 3 ); add1 ( lhs , * key2 . itr , M / 3 ); add2 ( lhs , * key3 . itr , M / 3 ); const auto dens = key0 . dens * value0 * key1 . dens * value1 * key2 . dens * value2 * key3 . dens * value3 ; const auto kind_sp = key0 . kind_sp + key1 . kind_sp + key2 . kind_sp + key3 . kind_sp ; const auto pair_sp = key0 . pair_sp + key1 . pair_sp + key2 . pair_sp + key3 . pair_sp ; const auto kind_to = key0 . kind_to + key1 . kind_to + key2 . kind_to + key3 . kind_to ; const auto pair_to = key0 . pair_to + key1 . pair_to + key2 . pair_to + key3 . pair_to ; const int num_lh = lhs [ 5 + M / 3 ]; const int num_sp = 7 - pair_sp + ( kind_sp < 7 ? 7 - kind_sp : 0 ); const int num_to = 14 - kind_to - ( pair_to > 0 ? 1 : 0 ); const int num_all = std :: min ({ num_lh , num_sp , num_to }); tmp [ num_all ] += dens ; } } } } cnt += tmp * coef ( i , j , k ); } } } const auto end = std :: chrono :: system_clock :: now (); const auto total = cnt . sum (); double ev = 0.0 ; std :: cout << \"Shanten \\t Count \\t Prop\" << std :: endl ; for ( int i = 0 ; i < 8 ; ++ i ) { ev += ( i - 1 ) * cnt [ i ]; std :: cout << i - 1 << \" \\t \" << cnt [ i ] << \" \\t \" << static_cast < double > ( cnt [ i ]) / total << std :: endl ; } std :: cout << \"Number of Tiles: \" << M << std :: endl ; std :: cout << \"Total: \" << total << std :: endl ; std :: cout << \"Time (msec.): \" << std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( end - start ). count () << std :: endl ; std :: cout << \"Avg Shanten: \" << ev / total << std :: endl ; return 0 ; } \u51fa\u529b: 1 2 3 4 5 6 7 8 9 10 11 12 13 Shanten Count Prop -1 12859078207674 3.02545e-06 0 2966241795738948 0.000697889 1 99154452630748356 0.0233288 2 828714358375292670 0.194978 3 1867404976243926528 0.439358 4 1211948980271480832 0.285144 5 233501763289743360 0.0549376 6 6601397483077632 0.00155316 Number of Tiles: 14 Total: 4250305029168216000 Time (msec.): 1395 Avg Shanten: 3.15594 \u914d\u724c\u6642(\u624b\u724c\u306e\u679a\u6570\u304c 14 \u679a\u306e\u3068\u304d)\u5411\u8074\u6570\u306e\u5e73\u5747\u5024\u306f 3.15594 \u3067\u3042\u308b.","title":"C. \u914d\u724c\u6642\u5411\u8074\u6570"},{"location":"shanten/#_1","text":"","title":"\u914d\u724c\u6642\u5411\u8074\u6570"},{"location":"shanten/#_2","text":"\u3059\u3079\u3066\u306e\u624b\u724c\u306b\u3064\u3044\u3066\u5411\u8074\u6570\u3092\u8a08\u7b97\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u8a08\u7b97\u91cf\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3057\u307e\u3046. \u4e8b\u524d\u306b\u6570\u724c\u3068\u5b57\u724c\u306e\u5411\u8074\u6570\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3064\u3044\u3066\u96c6\u7d04\u3057, \u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3044\u304f\u3064\u5b58\u5728\u3059\u308b\u304b\u3092\u30e1\u30e2\u3057\u3066\u304a\u304f. \u624b\u724c\u306e\u679a\u6570\u304c\u4e88\u3081\u6c7a\u3081\u3089\u308c\u305f\u6570\u306b\u306a\u308b\u3088\u3046\u306a\u3059\u3079\u3066\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5168\u63a2\u7d22\u3059\u308b. \u3053\u306e\u3068\u304d\u5411\u8074\u6570\u3092\u8a08\u7b97\u3057\u306a\u304c\u3089\u540c\u3058\u5411\u8074\u6570\u3068\u306a\u308b\u624b\u724c\u306e\u6570\u3082\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u8a08\u7b97\u91cf\u3092\u5c0f\u3055\u304f\u3067\u304d\u308b. \u307e\u305f, \u6570\u724c\u306e\u8272\u3069\u3046\u3057\u3092\u5165\u308c\u66ff\u3048\u3066\u3082\u5411\u8074\u6570\u306f\u5909\u308f\u3089\u306a\u3044\u4e8b\u5b9f\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3055\u3089\u306b\u8a08\u7b97\u91cf\u3092\u5c0f\u3055\u304f\u3067\u304d\u308b.","title":"\u6982\u8981"},{"location":"shanten/#_3","text":"\u4ee5\u4e0b\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u306f, shanten-number \u304b\u3089\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30d5\u30a1\u30a4\u30eb( index_s.txt \u3068 index_h.txt )\u3092\u5165\u624b\u3057\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3059\u308b\u3053\u3068. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 #include <chrono> #include <fstream> #include <functional> #include <iostream> #include <unordered_map> #include <numeric> #include <valarray> #include <vector> #include <boost/container_hash/hash.hpp> using Vec = std :: vector < int > ; using Iter = std :: vector < Vec >:: iterator ; struct Key ; struct Hash ; using Keys = std :: unordered_map < Key , int , Hash > ; struct Key { // \u8ddd\u96e2\u30c6\u30fc\u30d6\u30eb\u3078\u306e\u30a4\u30c6\u30ec\u30fc\u30bf Iter itr ; // \u624b\u724c\u306e\u30d1\u30bf\u30fc\u30f3\u6570 long long dens ; // \u4e03\u5bfe\u5b50\u3092\u69cb\u6210\u3059\u308b\u724c\u306e\u7a2e\u985e\u6570 int kind_sp ; // \u4e03\u5bfe\u5b50\u3092\u69cb\u6210\u3059\u308b\u5bfe\u5b50\u306e\u7a2e\u985e\u6570 int pair_sp ; // \u56fd\u58eb\u7121\u53cc\u3092\u69cb\u6210\u3059\u308b\u724c\u306e\u7a2e\u985e\u6570 int kind_to ; // \u56fd\u58eb\u7121\u53cc\u3092\u69cb\u6210\u3059\u308b\u5bfe\u5b50\u306e\u7a2e\u985e\u6570 int pair_to ; }; struct Hash { std :: size_t operator ()( const Key & key ) const { using boost :: hash_combine ; using boost :: hash_range ; std :: size_t seed = 0 ; hash_combine ( seed , hash_range ( key . itr -> begin (), key . itr -> end ())); hash_combine ( seed , key . dens ); hash_combine ( seed , key . kind_sp ); hash_combine ( seed , key . pair_sp ); hash_combine ( seed , key . kind_to ); hash_combine ( seed , key . kind_sp ); return seed ; } }; bool operator == ( const Key & lhs , const Key & rhs ) { return * lhs . itr == * rhs . itr && lhs . dens == rhs . dens && lhs . kind_sp == rhs . kind_sp && lhs . pair_sp == rhs . pair_sp && lhs . kind_to == rhs . kind_to && lhs . pair_to == rhs . pair_to ; } void add1 ( Vec & lhs , const Vec & rhs , const int m ) { for ( int j = m + 5 ; j >= 5 ; -- j ) { int sht = std :: min ( lhs [ j ] + rhs [ 0 ], lhs [ 0 ] + rhs [ j ]); for ( int k = 5 ; k < j ; ++ k ) { sht = std :: min ({ sht , lhs [ k ] + rhs [ j - k ], lhs [ j - k ] + rhs [ k ]}); } lhs [ j ] = sht ; } for ( int j = m ; j >= 0 ; -- j ) { int sht = lhs [ j ] + rhs [ 0 ]; for ( int k = 0 ; k < j ; ++ k ) { sht = std :: min ( sht , lhs [ k ] + rhs [ j - k ]); } lhs [ j ] = sht ; } } void add2 ( Vec & lhs , const Vec & rhs , const int m ) { int j = m + 5 ; int sht = std :: min ( lhs [ j ] + rhs [ 0 ], lhs [ 0 ] + rhs [ j ]); for ( int k = 5 ; k < j ; ++ k ) { sht = std :: min ({ sht , lhs [ k ] + rhs [ j - k ], lhs [ j - k ] + rhs [ k ]}); } lhs [ j ] = sht ; } void read_file ( Iter first , const Iter last , const char * file ) { std :: ifstream fin ( file ); int tmp ; for (; first != last ; ++ first ) { for ( int j = 0 ; j < 10 ; ++ j ) { fin >> tmp ; ( * first )[ j ] = tmp ; } } } // \u624b\u724c\u751f\u6210(\u5168\u5e45) template < bool IsHonor > void generate ( int n , int m , std :: vector < Vec >& table , Keys & keys ) { // \u7d44\u307f\u5408\u308f\u305b(4Cr) static const Vec c = { 1 , 4 , 6 , 4 , 1 }; static constexpr int N = IsHonor ? 7 : 9 ; static Vec quin ( N + 1 ); static Vec dens ( N + 1 , 1 ); static Vec kind_sp ( N + 1 ); static Vec pair_sp ( N + 1 ); static Vec kind_to ( N + 1 ); static Vec pair_to ( N + 1 ); if ( n == N ) { const Key key { std :: next ( table . begin (), quin [ N ]), dens [ N ], kind_sp [ N ], pair_sp [ N ], kind_to [ N ], pair_to [ N ]}; if ( auto itr = keys . find ( key ); itr == keys . end ()) { keys . emplace ( key , 1 ); } else { ++ itr -> second ; } } else { for ( int i = std :: max ( 0 , m - 4 * ( N - 1 - n )); i <= std :: min ( 4 , m ); ++ i ) { quin [ n + 1 ] = quin [ n ] * 5 + i ; dens [ n + 1 ] = dens [ n ] * c [ i ]; kind_sp [ n + 1 ] = kind_sp [ n ] + ( i > 0 ? 1 : 0 ); pair_sp [ n + 1 ] = pair_sp [ n ] + ( i >= 2 ? 1 : 0 ); kind_to [ n + 1 ] = kind_to [ n ] + (( IsHonor || n == 0 || n == N - 1 ) && i > 0 ? 1 : 0 ); pair_to [ n + 1 ] = pair_to [ n ] + (( IsHonor || n == 0 || n == N - 1 ) && i >= 2 ? 1 : 0 ); generate < IsHonor > ( n + 1 , m - i , table , keys ); } } } inline int coef ( const int i , const int j , const int k ) { if ( i == j && j == k ) { return 1 ; } else if ( i == j || j == k || k == i ) { return 3 ; } else { return 6 ; } } int main () { constexpr int M = 14 ; const auto start = std :: chrono :: system_clock :: now (); std :: vector < Vec > mp1 ( 1953125 , Vec ( 10 )); std :: vector < Vec > mp2 ( 78125 , Vec ( 10 )); read_file ( mp1 . begin (), mp1 . end (), \"index_s.txt\" ); read_file ( mp2 . begin (), mp2 . end (), \"index_h.txt\" ); std :: vector < Keys > keys1 ( M + 1 ); std :: vector < Keys > keys2 ( M + 1 ); for ( int m = 0 ; m <= M ; ++ m ) { generate < false > ( 0 , m , mp1 , keys1 [ m ]); generate < true > ( 0 , m , mp2 , keys2 [ m ]); } std :: valarray < long long > cnt ( 8 ); for ( int i = 0 ; i <= M ; ++ i ) { for ( int j = i ; j <= M - i ; ++ j ) { for ( int k = j ; k <= M - i - j ; ++ k ) { std :: valarray < long long > tmp ( 8 ); for ( const auto & [ key0 , value0 ] : keys1 [ i ]) { for ( const auto & [ key1 , value1 ] : keys1 [ j ]) { for ( const auto & [ key2 , value2 ] : keys1 [ k ]) { for ( const auto & [ key3 , value3 ] : keys2 [ M - i - j - k ]) { Vec lhs = * key0 . itr ; add1 ( lhs , * key1 . itr , M / 3 ); add1 ( lhs , * key2 . itr , M / 3 ); add2 ( lhs , * key3 . itr , M / 3 ); const auto dens = key0 . dens * value0 * key1 . dens * value1 * key2 . dens * value2 * key3 . dens * value3 ; const auto kind_sp = key0 . kind_sp + key1 . kind_sp + key2 . kind_sp + key3 . kind_sp ; const auto pair_sp = key0 . pair_sp + key1 . pair_sp + key2 . pair_sp + key3 . pair_sp ; const auto kind_to = key0 . kind_to + key1 . kind_to + key2 . kind_to + key3 . kind_to ; const auto pair_to = key0 . pair_to + key1 . pair_to + key2 . pair_to + key3 . pair_to ; const int num_lh = lhs [ 5 + M / 3 ]; const int num_sp = 7 - pair_sp + ( kind_sp < 7 ? 7 - kind_sp : 0 ); const int num_to = 14 - kind_to - ( pair_to > 0 ? 1 : 0 ); const int num_all = std :: min ({ num_lh , num_sp , num_to }); tmp [ num_all ] += dens ; } } } } cnt += tmp * coef ( i , j , k ); } } } const auto end = std :: chrono :: system_clock :: now (); const auto total = cnt . sum (); double ev = 0.0 ; std :: cout << \"Shanten \\t Count \\t Prop\" << std :: endl ; for ( int i = 0 ; i < 8 ; ++ i ) { ev += ( i - 1 ) * cnt [ i ]; std :: cout << i - 1 << \" \\t \" << cnt [ i ] << \" \\t \" << static_cast < double > ( cnt [ i ]) / total << std :: endl ; } std :: cout << \"Number of Tiles: \" << M << std :: endl ; std :: cout << \"Total: \" << total << std :: endl ; std :: cout << \"Time (msec.): \" << std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( end - start ). count () << std :: endl ; std :: cout << \"Avg Shanten: \" << ev / total << std :: endl ; return 0 ; } \u51fa\u529b: 1 2 3 4 5 6 7 8 9 10 11 12 13 Shanten Count Prop -1 12859078207674 3.02545e-06 0 2966241795738948 0.000697889 1 99154452630748356 0.0233288 2 828714358375292670 0.194978 3 1867404976243926528 0.439358 4 1211948980271480832 0.285144 5 233501763289743360 0.0549376 6 6601397483077632 0.00155316 Number of Tiles: 14 Total: 4250305029168216000 Time (msec.): 1395 Avg Shanten: 3.15594 \u914d\u724c\u6642(\u624b\u724c\u306e\u679a\u6570\u304c 14 \u679a\u306e\u3068\u304d)\u5411\u8074\u6570\u306e\u5e73\u5747\u5024\u306f 3.15594 \u3067\u3042\u308b.","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"ssrf/","text":"\u9023\u7acb\u96c6\u5408\u6f38\u5316\u5f0f \u00b6 \u5b9a\u7fa9 \u00b6 \\(H^n\\) \u306e\u8981\u7d20\u306e\u3046\u3061, \\(m\\) \u9762\u5b50\u306b\u5206\u89e3\u3067\u304d\u308b\u3082\u306e\u306e\u96c6\u5408\u3092 \\(A^n_m\\) , \\(m\\) \u9762\u5b50\u4e00\u96c0\u982d\u306b\u5206\u89e3\u3067\u304d\u308b\u3082\u306e\u306e\u96c6\u5408\u3092 \\(B^n_m\\) \u3068\u3059\u308b. \u90e8\u5206\u96c6\u5408 \u8aac\u660e \\(A^n_m\\) \\(H^n\\) \u306e\u8981\u7d20\u306e\u3046\u3061, \\(m\\) \u9762\u5b50\u306b\u5206\u89e3\u3067\u304d\u308b\u3082\u306e\u306e\u96c6\u5408 \\(B^n_m\\) \\(H^n\\) \u306e\u8981\u7d20\u306e\u3046\u3061, \\(m\\) \u9762\u5b50\u4e00\u96c0\u982d\u306b\u5206\u89e3\u3067\u304d\u308b\u3082\u306e\u306e\u96c6\u5408 \u3059\u3079\u3066\u306e \\(n \\in [0, 3], m \\in [0, 4]\\) \u306b\u3064\u3044\u3066 \\(A^n_m, B^n_m\\) \u304c\u4e0e\u3048\u3089\u305f\u3068\u304d, \u4ee5\u4e0b\u306e \u9023\u7acb\u96c6\u5408\u6f38\u5316\u5f0f \u3092\u89e3\u304f\u3053\u3068\u3067\u3059\u3079\u3066\u306e \\(3N+2\\) \u548c\u4e86\u5f62\u3092\u5f97\u3089\u308c\u308b. \u3053\u3053\u3067 \\(m\\) \u9762\u5b50\u4e00\u96c0\u982d\u304b\u3089\u306a\u308b \\(3N+2\\) \u548c\u4e86\u5f62\u306e\u96c6\u5408\u306f \\(B^{(3)}_m\\) \u3067\u3042\u308b. \\[ \\left\\{ \\begin{aligned} A^{(n+1)}_m &= \\bigcup^{m}_{l=0} \\left\\{ A^{(n)}_l \\times A^{n+1}_{m-l} \\right\\} & A^{(0)}_m &= A^0_m \\\\ B^{(n+1)}_m &= \\bigcup^{m}_{l=0} \\left\\{ B^{(n)}_l \\times A^{n+1}_{m-l} \\cup A^{(n)}_l \\times B^{n+1}_{m-l} \\right\\} & B^{(0)}_m &= B^0_m \\end{aligned} \\right. \\\\ \\] \u9023\u7acb\u96c6\u5408\u6f38\u5316\u5f0f\u306f\u6570\u3069\u3046\u3057\u306e\u6f14\u7b97\u306b\u3064\u3044\u3066\u306e\u901a\u5e38\u306e\u6f38\u5316\u5f0f\u3068\u7570\u306a\u308a, \u96c6\u5408\u3069\u3046\u3057\u306e\u6f14\u7b97\u306b\u3064\u3044\u3066\u306e\u6f38\u5316\u5f0f\u3067\u3042\u308b. \u3053\u308c\u3092\u89e3\u3053\u3046\u3068\u3059\u308b\u3068\u96c6\u5408\u3092\u3069\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u8868\u73fe\u3059\u308b\u304b\u306a\u3069\u306e\u7591\u554f\u304c\u751f\u3058\u308b\u304c, \u5b9f\u969b\u306b\u3053\u308c\u3092\u89e3\u304f\u3053\u3068\u306f\u307e\u305a\u306a\u304f\u5927\u62b5\u306f\u901a\u5e38\u306e\u6f38\u5316\u5f0f\u306b\u5e30\u7740\u3055\u305b\u308b. \u306a\u304a, \u9023\u7acb\u96c6\u5408\u6f38\u5316\u5f0f\u304b\u3089\u5c0e\u304b\u308c\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u52d5\u7684\u8a08\u753b\u6cd5\u306e\u8003\u3048\u65b9\u3092\u7528\u3044\u3066\u3044\u308b\u3068\u3044\u3048\u308b. \u548c\u4e86\u5f62\u306e\u6570 \u00b6 \u9023\u7acb\u96c6\u5408\u6f38\u5316\u5f0f\u306e\u6700\u3082\u7c21\u5358\u306a\u5fdc\u7528\u4f8b\u306f\u548c\u4e86\u5f62\u306e\u6570\u3092\u5f97\u308b\u3053\u3068\u3067\u3042\u308b. \\(3N+2\\) \u548c\u4e86\u5f62\u306e\u6570 \\(|B^{(3)}_m|\\) \u306f\u4ee5\u4e0b\u306e\u9023\u7acb\u6f38\u5316\u5f0f\u306e\u89e3\u3068\u3057\u3066\u5f97\u3089\u308c\u308b. \u3053\u308c\u306f \u5929\u548c\u306e\u78ba\u7387 \u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u306b\u5229\u7528\u3067\u304d\u308b. \\[ \\left\\{ \\begin{aligned} |A^{(n+1)}_m| &= \\sum^{m}_{l=0} \\left\\{ |A^{(n)}_l| \\times |A^{n+1}_{m-l}| \\right\\} & |A^{(0)}_m| &= |A^0_m| \\\\ |B^{(n+1)}_m| &= \\sum^{m}_{l=0} \\left\\{ |B^{(n)}_l| \\times |A^{n+1}_{m-l}| + |A^{(n)}_l| \\times |B^{n+1}_{m-l}| \\right\\} & |B^{(0)}_m| &= |B^0_m| \\end{aligned} \\right. \\\\ \\] \u5411\u8074\u6570 \u00b6 \u3053\u3053\u3067\u306f\u5411\u8074\u6570\u3092\u300c\u8074\u724c\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u724c\u306e\u679a\u6570\u306e\u6700\u5c0f\u5024\u300d\u3068\u5b9a\u7fa9\u3059\u308b. \u8074\u724c\u3092\u57fa\u6e96\u3068\u3057\u305f\u5411\u8074\u6570\u306f\u8a08\u7b97\u4e0a\u4e0d\u4fbf\u306a\u306e\u3067, \u300c\u548c\u4e86\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u724c\u306e\u679a\u6570\u306e\u6700\u5c0f\u5024\u300d\u3068\u3057\u3066\u7f6e\u63db\u6570\u3092\u5c0e\u5165\u3059\u308b. \u5411\u8074\u6570 \\(S(h)\\) \u3068\u7f6e\u63db\u6570 \\(T(h)\\) \u306e\u95a2\u4fc2\u306f\u6b21\u5f0f\u3067\u8868\u3055\u308c\u308b. \\[ S(h) = T(h) - 1 \\] \\(h^n\\) \u304b\u3089 \\(g^n\\) \u306b\u5909\u5316\u3055\u305b\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u724c\u306e\u679a\u6570\u3092\u8ddd\u96e2 \\(d(g^n, h^n)\\) \u3068\u3057\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b. \\[ d(g^n, h^n) = \\frac{1}{2} \\sum_{i} (|g^n_i - h^n_i| + g^n_i - h^n_i) \\] \u3053\u308c\u3092\u7528\u3044\u3066\u624b\u724c \\(h\\) \u3092\u624b\u724c \\(g\\) \u306b\u5909\u5316\u3055\u305b\u308b\u306e\u306b\u5fc5\u8981\u306a\u724c\u306e\u679a\u6570\u306f \\[ \\sum_{n=0}^{3} d(g^n, h^n) \\] \u3068\u8868\u305b\u308b. \u8ddd\u96e2\u3092\u7528\u3044\u3066\u624b\u724c \\(h\\) \u306e\u7f6e\u63db\u6570\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b. \\[ T(h) = \\min_{b \\in B^{(3)}_m} \\sum_{n=0}^{3} d(b^n, h^n) \\] \u3053\u3053\u3067, \u4e8b\u524d\u306b\u4ee5\u4e0b\u306e\u5024\u304c\u308f\u304b\u3063\u3066\u3044\u308b\u3068\u3059\u308b. \\[ \\left\\{ \\begin{aligned} u^n_m &= \\min_{a \\in A^n_m} d(a^n, h^n) \\\\ t^n_m &= \\min_{b \\in B^n_m} d(b^n, h^n) \\\\ \\end{aligned} \\right. \\] \u3053\u306e\u3068\u304d\u624b\u724c \\(h\\) \u306e\u7f6e\u63db\u6570 \\(T(h)\\) \u306f\u4ee5\u4e0b\u306e\u9023\u7acb\u6f38\u5316\u5f0f\u306e\u89e3 \\(t^{(3)}_m\\) \u306b\u7b49\u3057\u3044. \\[ \\left\\{ \\begin{aligned} u^{(n+1)}_m &= \\min_{0 \\le l \\le m} \\left\\{ u^{(n)}_l + u^{n+1}_{m-l} \\right\\} & u^{(0)}_m &= u^0_m \\\\ t^{(n+1)}_m &= \\min_{0 \\le l \\le m} \\left\\{ \\min\\{ t^{(n)}_l + u^{n+1}_{m-l} , u^{(n)}_l + t^{n+1}_{m-l} \\} \\right\\} & t^{(0)}_m &= t^0_m \\end{aligned} \\right. \\] \u3053\u306e\u3088\u3046\u306b\u524d\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u3067\u7f6e\u63db\u6570(\u5411\u8074\u6570)\u3092\u9ad8\u901f\u306b\u8a08\u7b97\u3067\u304d\u308b. \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f shanten-number \u3092\u53c2\u7167\u3059\u308b\u3053\u3068. \u914d\u724c\u6642\u5411\u8074\u6570 \u00b6 \u914d\u724c\u6642\u306e\u5411\u8074\u6570\u306b\u3064\u3044\u3066\u306f C. \u914d\u724c\u6642\u5411\u8074\u6570 \u3092\u53c2\u7167\u3059\u308b\u3053\u3068. \u6709\u52b9\u724c/\u4e0d\u8981\u724c \u00b6 \u7f6e\u63db\u6570(\u5411\u8074\u6570)\u3068\u5408\u308f\u305b\u3066\u6709\u52b9\u724c/\u4e0d\u8981\u724c\u3092\u540c\u6642\u306b\u8a08\u7b97\u3067\u304d\u308b. \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f necessary-or-unnecessary-tiles \u3092\u53c2\u7167\u3059\u308b\u3053\u3068. \u307e\u305f, \u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u3066 \u914d\u724c\u6642\u6709\u52b9\u724c\u306e\u679a\u6570 \u306e\u5e73\u5747\u5024\u3092\u8a08\u7b97\u3067\u304d\u308b. \u8074\u724c\u5f62 \u00b6 \u548c\u4e86\u5f62\u3068\u540c\u69d8\u306b\u8074\u724c\u5f62\u3082\u9023\u7acb\u96c6\u5408\u6f38\u5316\u5f0f\u3067\u8868\u305b\u308b. \u524d\u8ff0\u306e \\(A^n_m, B^n_m\\) \u306b\u52a0\u3048\u3066\u4ee5\u4e0b\u306e\u96c6\u5408 \\(C^n_m, D^n_m\\) \u3092\u8003\u3048\u308b. \u90e8\u5206\u96c6\u5408 \u8aac\u660e \\(A^n_m\\) \\(H^n\\) \u306e\u8981\u7d20\u306e\u3046\u3061, \\(m\\) \u9762\u5b50\u306b\u5206\u89e3\u3067\u304d\u308b\u3082\u306e\u306e\u96c6\u5408 \\(B^n_m\\) \\(H^n\\) \u306e\u8981\u7d20\u306e\u3046\u3061, \\(m\\) \u9762\u5b50\u4e00\u96c0\u982d\u306b\u5206\u89e3\u3067\u304d\u308b\u3082\u306e\u306e\u96c6\u5408 \\(C^n_m\\) \\(H^n\\) \u306e\u8981\u7d20\u306e\u3046\u3061, \u3042\u3068 1 \u679a\u8ffd\u52a0\u3059\u308b\u3068 \\(m\\) \u9762\u5b50\u306b\u5206\u89e3\u3067\u304d\u308b\u3082\u306e\u306e\u96c6\u5408 \\(D^n_m\\) \\(H^n\\) \u306e\u8981\u7d20\u306e\u3046\u3061, \u3042\u3068 1 \u679a\u8ffd\u52a0\u3059\u308b\u3068 \\(m\\) \u9762\u5b50\u4e00\u96c0\u982d\u306b\u5206\u89e3\u3067\u304d\u308b\u3082\u306e\u306e\u96c6\u5408 \u3059\u3079\u3066\u306e \\(n \\in [0, 3], m \\in [0, 4]\\) \u306b\u3064\u3044\u3066 \\(A^n_m, B^n_m, C^n_m, D^n_m\\) \u304c\u4e0e\u3048\u3089\u305f\u3068\u304d, \u4ee5\u4e0b\u306e\u9023\u7acb\u96c6\u5408\u6f38\u5316\u5f0f\u3092\u89e3\u304f\u3053\u3068\u3067\u3059\u3079\u3066\u306e \\(3N+1\\) \u8074\u724c\u5f62\u306e\u96c6\u5408 \\(D^{(3)}_m\\) \u3092\u5f97\u3089\u308c\u308b. \\[ \\left\\{ \\begin{aligned} A^{(n+1)}_m &= \\bigcup^{m}_{l=0} \\left\\{ A^{(n)}_l \\times A^{n+1}_{m-l} \\right\\} & A^{(0)}_m &= A^0_m \\\\ B^{(n+1)}_m &= \\bigcup^{m}_{l=0} \\left\\{ B^{(n)}_l \\times A^{n+1}_{m-l} \\cup A^{(n)}_l \\times B^{n+1}_{m-l} \\right\\} & B^{(0)}_m &= B^0_m \\\\ C^{(n+1)}_m &= \\bigcup^{m}_{l=0} \\left\\{ C^{(n)}_l \\times A^{n+1}_{m-l} \\cup A^{(n)}_l \\times C^{n+1}_{m-l} \\right\\} & C^{(0)}_m &= C^0_m \\\\ D^{(n+1)}_m &= \\bigcup^{m}_{l=0} \\left\\{ D^{(n)}_l \\times A^{n+1}_{m-l} \\cup A^{(n)}_l \\times D^{n+1}_{m-l} \\cup B^{(n)}_l \\times C^{n+1}_{m-l-1} \\cup C^{(n)}_l \\times B^{n+1}_{m-l-1} \\right\\} & D^{(0)}_m &= D^0_m \\end{aligned} \\right. \\] \u548c\u4e86\u5f62\u306e\u6570\u3068\u540c\u69d8\u306b\u8074\u724c\u5f62\u306e\u6570\u3082\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b. \u7279\u306b, \u96c6\u5408 \\(C^n_m, D^n_m\\) \u306e\u3046\u3061\u3042\u308b\u724c\u3092\u5f85\u3064\u96c6\u5408\u3060\u3051\u3092\u53d6\u308a\u51fa\u305b\u3070, \u305d\u306e\u724c\u3092\u5f85\u3064\u8074\u724c\u5f62\u306e\u96c6\u5408\u3092\u5f97\u3089\u308c\u308b. \u3053\u306e\u96c6\u5408\u306e\u8981\u7d20\u6570\u3092\u3059\u3079\u3066\u306e\u8074\u724c\u5f62\u306e\u96c6\u5408\u306e\u8981\u7d20\u6570\u3067\u5272\u308b\u3053\u3068\u3067, \u3059\u3079\u3066\u306e\u8074\u724c\u5f62\u306e\u51fa\u73fe\u78ba\u7387\u304c\u305d\u308c\u305e\u308c\u7b49\u3057\u3044\u3068\u3057\u305f\u3068\u304d\u306b\u3042\u308b\u724c\u3092\u5f85\u3064\u78ba\u7387\u3092\u8a08\u7b97\u3067\u304d\u308b. \u3064\u307e\u308a, \u6700\u3082\u5358\u7d14\u306a\u4eee\u5b9a\u306e\u4e0b\u3067\u724c\u306e\u5371\u967a\u5ea6\u3092\u4e88\u6e2c\u3067\u304d\u308b. \u3053\u308c\u306b\u3064\u3044\u3066\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f predictor \u3092\u53c2\u7167\u3059\u308b\u3053\u3068. \\[ (\\text{\u3042\u308b\u724c\u3092\u5f85\u3064\u78ba\u7387}) = \\frac{(\\text{\u305d\u306e\u724c\u3092\u5f85\u3064\u8074\u724c\u5f62\u306e\u6570})}{(\\text{\u3059\u3079\u3066\u306e\u8074\u724c\u5f62\u306e\u6570})} \\]","title":"5. \u9023\u7acb\u96c6\u5408\u6f38\u5316\u5f0f"},{"location":"ssrf/#_1","text":"","title":"\u9023\u7acb\u96c6\u5408\u6f38\u5316\u5f0f"},{"location":"ssrf/#_2","text":"\\(H^n\\) \u306e\u8981\u7d20\u306e\u3046\u3061, \\(m\\) \u9762\u5b50\u306b\u5206\u89e3\u3067\u304d\u308b\u3082\u306e\u306e\u96c6\u5408\u3092 \\(A^n_m\\) , \\(m\\) \u9762\u5b50\u4e00\u96c0\u982d\u306b\u5206\u89e3\u3067\u304d\u308b\u3082\u306e\u306e\u96c6\u5408\u3092 \\(B^n_m\\) \u3068\u3059\u308b. \u90e8\u5206\u96c6\u5408 \u8aac\u660e \\(A^n_m\\) \\(H^n\\) \u306e\u8981\u7d20\u306e\u3046\u3061, \\(m\\) \u9762\u5b50\u306b\u5206\u89e3\u3067\u304d\u308b\u3082\u306e\u306e\u96c6\u5408 \\(B^n_m\\) \\(H^n\\) \u306e\u8981\u7d20\u306e\u3046\u3061, \\(m\\) \u9762\u5b50\u4e00\u96c0\u982d\u306b\u5206\u89e3\u3067\u304d\u308b\u3082\u306e\u306e\u96c6\u5408 \u3059\u3079\u3066\u306e \\(n \\in [0, 3], m \\in [0, 4]\\) \u306b\u3064\u3044\u3066 \\(A^n_m, B^n_m\\) \u304c\u4e0e\u3048\u3089\u305f\u3068\u304d, \u4ee5\u4e0b\u306e \u9023\u7acb\u96c6\u5408\u6f38\u5316\u5f0f \u3092\u89e3\u304f\u3053\u3068\u3067\u3059\u3079\u3066\u306e \\(3N+2\\) \u548c\u4e86\u5f62\u3092\u5f97\u3089\u308c\u308b. \u3053\u3053\u3067 \\(m\\) \u9762\u5b50\u4e00\u96c0\u982d\u304b\u3089\u306a\u308b \\(3N+2\\) \u548c\u4e86\u5f62\u306e\u96c6\u5408\u306f \\(B^{(3)}_m\\) \u3067\u3042\u308b. \\[ \\left\\{ \\begin{aligned} A^{(n+1)}_m &= \\bigcup^{m}_{l=0} \\left\\{ A^{(n)}_l \\times A^{n+1}_{m-l} \\right\\} & A^{(0)}_m &= A^0_m \\\\ B^{(n+1)}_m &= \\bigcup^{m}_{l=0} \\left\\{ B^{(n)}_l \\times A^{n+1}_{m-l} \\cup A^{(n)}_l \\times B^{n+1}_{m-l} \\right\\} & B^{(0)}_m &= B^0_m \\end{aligned} \\right. \\\\ \\] \u9023\u7acb\u96c6\u5408\u6f38\u5316\u5f0f\u306f\u6570\u3069\u3046\u3057\u306e\u6f14\u7b97\u306b\u3064\u3044\u3066\u306e\u901a\u5e38\u306e\u6f38\u5316\u5f0f\u3068\u7570\u306a\u308a, \u96c6\u5408\u3069\u3046\u3057\u306e\u6f14\u7b97\u306b\u3064\u3044\u3066\u306e\u6f38\u5316\u5f0f\u3067\u3042\u308b. \u3053\u308c\u3092\u89e3\u3053\u3046\u3068\u3059\u308b\u3068\u96c6\u5408\u3092\u3069\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u8868\u73fe\u3059\u308b\u304b\u306a\u3069\u306e\u7591\u554f\u304c\u751f\u3058\u308b\u304c, \u5b9f\u969b\u306b\u3053\u308c\u3092\u89e3\u304f\u3053\u3068\u306f\u307e\u305a\u306a\u304f\u5927\u62b5\u306f\u901a\u5e38\u306e\u6f38\u5316\u5f0f\u306b\u5e30\u7740\u3055\u305b\u308b. \u306a\u304a, \u9023\u7acb\u96c6\u5408\u6f38\u5316\u5f0f\u304b\u3089\u5c0e\u304b\u308c\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u52d5\u7684\u8a08\u753b\u6cd5\u306e\u8003\u3048\u65b9\u3092\u7528\u3044\u3066\u3044\u308b\u3068\u3044\u3048\u308b.","title":"\u5b9a\u7fa9"},{"location":"ssrf/#_3","text":"\u9023\u7acb\u96c6\u5408\u6f38\u5316\u5f0f\u306e\u6700\u3082\u7c21\u5358\u306a\u5fdc\u7528\u4f8b\u306f\u548c\u4e86\u5f62\u306e\u6570\u3092\u5f97\u308b\u3053\u3068\u3067\u3042\u308b. \\(3N+2\\) \u548c\u4e86\u5f62\u306e\u6570 \\(|B^{(3)}_m|\\) \u306f\u4ee5\u4e0b\u306e\u9023\u7acb\u6f38\u5316\u5f0f\u306e\u89e3\u3068\u3057\u3066\u5f97\u3089\u308c\u308b. \u3053\u308c\u306f \u5929\u548c\u306e\u78ba\u7387 \u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u306b\u5229\u7528\u3067\u304d\u308b. \\[ \\left\\{ \\begin{aligned} |A^{(n+1)}_m| &= \\sum^{m}_{l=0} \\left\\{ |A^{(n)}_l| \\times |A^{n+1}_{m-l}| \\right\\} & |A^{(0)}_m| &= |A^0_m| \\\\ |B^{(n+1)}_m| &= \\sum^{m}_{l=0} \\left\\{ |B^{(n)}_l| \\times |A^{n+1}_{m-l}| + |A^{(n)}_l| \\times |B^{n+1}_{m-l}| \\right\\} & |B^{(0)}_m| &= |B^0_m| \\end{aligned} \\right. \\\\ \\]","title":"\u548c\u4e86\u5f62\u306e\u6570"},{"location":"ssrf/#_4","text":"\u3053\u3053\u3067\u306f\u5411\u8074\u6570\u3092\u300c\u8074\u724c\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u724c\u306e\u679a\u6570\u306e\u6700\u5c0f\u5024\u300d\u3068\u5b9a\u7fa9\u3059\u308b. \u8074\u724c\u3092\u57fa\u6e96\u3068\u3057\u305f\u5411\u8074\u6570\u306f\u8a08\u7b97\u4e0a\u4e0d\u4fbf\u306a\u306e\u3067, \u300c\u548c\u4e86\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u724c\u306e\u679a\u6570\u306e\u6700\u5c0f\u5024\u300d\u3068\u3057\u3066\u7f6e\u63db\u6570\u3092\u5c0e\u5165\u3059\u308b. \u5411\u8074\u6570 \\(S(h)\\) \u3068\u7f6e\u63db\u6570 \\(T(h)\\) \u306e\u95a2\u4fc2\u306f\u6b21\u5f0f\u3067\u8868\u3055\u308c\u308b. \\[ S(h) = T(h) - 1 \\] \\(h^n\\) \u304b\u3089 \\(g^n\\) \u306b\u5909\u5316\u3055\u305b\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u724c\u306e\u679a\u6570\u3092\u8ddd\u96e2 \\(d(g^n, h^n)\\) \u3068\u3057\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b. \\[ d(g^n, h^n) = \\frac{1}{2} \\sum_{i} (|g^n_i - h^n_i| + g^n_i - h^n_i) \\] \u3053\u308c\u3092\u7528\u3044\u3066\u624b\u724c \\(h\\) \u3092\u624b\u724c \\(g\\) \u306b\u5909\u5316\u3055\u305b\u308b\u306e\u306b\u5fc5\u8981\u306a\u724c\u306e\u679a\u6570\u306f \\[ \\sum_{n=0}^{3} d(g^n, h^n) \\] \u3068\u8868\u305b\u308b. \u8ddd\u96e2\u3092\u7528\u3044\u3066\u624b\u724c \\(h\\) \u306e\u7f6e\u63db\u6570\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b. \\[ T(h) = \\min_{b \\in B^{(3)}_m} \\sum_{n=0}^{3} d(b^n, h^n) \\] \u3053\u3053\u3067, \u4e8b\u524d\u306b\u4ee5\u4e0b\u306e\u5024\u304c\u308f\u304b\u3063\u3066\u3044\u308b\u3068\u3059\u308b. \\[ \\left\\{ \\begin{aligned} u^n_m &= \\min_{a \\in A^n_m} d(a^n, h^n) \\\\ t^n_m &= \\min_{b \\in B^n_m} d(b^n, h^n) \\\\ \\end{aligned} \\right. \\] \u3053\u306e\u3068\u304d\u624b\u724c \\(h\\) \u306e\u7f6e\u63db\u6570 \\(T(h)\\) \u306f\u4ee5\u4e0b\u306e\u9023\u7acb\u6f38\u5316\u5f0f\u306e\u89e3 \\(t^{(3)}_m\\) \u306b\u7b49\u3057\u3044. \\[ \\left\\{ \\begin{aligned} u^{(n+1)}_m &= \\min_{0 \\le l \\le m} \\left\\{ u^{(n)}_l + u^{n+1}_{m-l} \\right\\} & u^{(0)}_m &= u^0_m \\\\ t^{(n+1)}_m &= \\min_{0 \\le l \\le m} \\left\\{ \\min\\{ t^{(n)}_l + u^{n+1}_{m-l} , u^{(n)}_l + t^{n+1}_{m-l} \\} \\right\\} & t^{(0)}_m &= t^0_m \\end{aligned} \\right. \\] \u3053\u306e\u3088\u3046\u306b\u524d\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u3067\u7f6e\u63db\u6570(\u5411\u8074\u6570)\u3092\u9ad8\u901f\u306b\u8a08\u7b97\u3067\u304d\u308b. \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f shanten-number \u3092\u53c2\u7167\u3059\u308b\u3053\u3068.","title":"\u5411\u8074\u6570"},{"location":"ssrf/#_5","text":"\u914d\u724c\u6642\u306e\u5411\u8074\u6570\u306b\u3064\u3044\u3066\u306f C. \u914d\u724c\u6642\u5411\u8074\u6570 \u3092\u53c2\u7167\u3059\u308b\u3053\u3068.","title":"\u914d\u724c\u6642\u5411\u8074\u6570"},{"location":"ssrf/#_6","text":"\u7f6e\u63db\u6570(\u5411\u8074\u6570)\u3068\u5408\u308f\u305b\u3066\u6709\u52b9\u724c/\u4e0d\u8981\u724c\u3092\u540c\u6642\u306b\u8a08\u7b97\u3067\u304d\u308b. \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f necessary-or-unnecessary-tiles \u3092\u53c2\u7167\u3059\u308b\u3053\u3068. \u307e\u305f, \u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u3066 \u914d\u724c\u6642\u6709\u52b9\u724c\u306e\u679a\u6570 \u306e\u5e73\u5747\u5024\u3092\u8a08\u7b97\u3067\u304d\u308b.","title":"\u6709\u52b9\u724c/\u4e0d\u8981\u724c"},{"location":"ssrf/#_7","text":"\u548c\u4e86\u5f62\u3068\u540c\u69d8\u306b\u8074\u724c\u5f62\u3082\u9023\u7acb\u96c6\u5408\u6f38\u5316\u5f0f\u3067\u8868\u305b\u308b. \u524d\u8ff0\u306e \\(A^n_m, B^n_m\\) \u306b\u52a0\u3048\u3066\u4ee5\u4e0b\u306e\u96c6\u5408 \\(C^n_m, D^n_m\\) \u3092\u8003\u3048\u308b. \u90e8\u5206\u96c6\u5408 \u8aac\u660e \\(A^n_m\\) \\(H^n\\) \u306e\u8981\u7d20\u306e\u3046\u3061, \\(m\\) \u9762\u5b50\u306b\u5206\u89e3\u3067\u304d\u308b\u3082\u306e\u306e\u96c6\u5408 \\(B^n_m\\) \\(H^n\\) \u306e\u8981\u7d20\u306e\u3046\u3061, \\(m\\) \u9762\u5b50\u4e00\u96c0\u982d\u306b\u5206\u89e3\u3067\u304d\u308b\u3082\u306e\u306e\u96c6\u5408 \\(C^n_m\\) \\(H^n\\) \u306e\u8981\u7d20\u306e\u3046\u3061, \u3042\u3068 1 \u679a\u8ffd\u52a0\u3059\u308b\u3068 \\(m\\) \u9762\u5b50\u306b\u5206\u89e3\u3067\u304d\u308b\u3082\u306e\u306e\u96c6\u5408 \\(D^n_m\\) \\(H^n\\) \u306e\u8981\u7d20\u306e\u3046\u3061, \u3042\u3068 1 \u679a\u8ffd\u52a0\u3059\u308b\u3068 \\(m\\) \u9762\u5b50\u4e00\u96c0\u982d\u306b\u5206\u89e3\u3067\u304d\u308b\u3082\u306e\u306e\u96c6\u5408 \u3059\u3079\u3066\u306e \\(n \\in [0, 3], m \\in [0, 4]\\) \u306b\u3064\u3044\u3066 \\(A^n_m, B^n_m, C^n_m, D^n_m\\) \u304c\u4e0e\u3048\u3089\u305f\u3068\u304d, \u4ee5\u4e0b\u306e\u9023\u7acb\u96c6\u5408\u6f38\u5316\u5f0f\u3092\u89e3\u304f\u3053\u3068\u3067\u3059\u3079\u3066\u306e \\(3N+1\\) \u8074\u724c\u5f62\u306e\u96c6\u5408 \\(D^{(3)}_m\\) \u3092\u5f97\u3089\u308c\u308b. \\[ \\left\\{ \\begin{aligned} A^{(n+1)}_m &= \\bigcup^{m}_{l=0} \\left\\{ A^{(n)}_l \\times A^{n+1}_{m-l} \\right\\} & A^{(0)}_m &= A^0_m \\\\ B^{(n+1)}_m &= \\bigcup^{m}_{l=0} \\left\\{ B^{(n)}_l \\times A^{n+1}_{m-l} \\cup A^{(n)}_l \\times B^{n+1}_{m-l} \\right\\} & B^{(0)}_m &= B^0_m \\\\ C^{(n+1)}_m &= \\bigcup^{m}_{l=0} \\left\\{ C^{(n)}_l \\times A^{n+1}_{m-l} \\cup A^{(n)}_l \\times C^{n+1}_{m-l} \\right\\} & C^{(0)}_m &= C^0_m \\\\ D^{(n+1)}_m &= \\bigcup^{m}_{l=0} \\left\\{ D^{(n)}_l \\times A^{n+1}_{m-l} \\cup A^{(n)}_l \\times D^{n+1}_{m-l} \\cup B^{(n)}_l \\times C^{n+1}_{m-l-1} \\cup C^{(n)}_l \\times B^{n+1}_{m-l-1} \\right\\} & D^{(0)}_m &= D^0_m \\end{aligned} \\right. \\] \u548c\u4e86\u5f62\u306e\u6570\u3068\u540c\u69d8\u306b\u8074\u724c\u5f62\u306e\u6570\u3082\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b. \u7279\u306b, \u96c6\u5408 \\(C^n_m, D^n_m\\) \u306e\u3046\u3061\u3042\u308b\u724c\u3092\u5f85\u3064\u96c6\u5408\u3060\u3051\u3092\u53d6\u308a\u51fa\u305b\u3070, \u305d\u306e\u724c\u3092\u5f85\u3064\u8074\u724c\u5f62\u306e\u96c6\u5408\u3092\u5f97\u3089\u308c\u308b. \u3053\u306e\u96c6\u5408\u306e\u8981\u7d20\u6570\u3092\u3059\u3079\u3066\u306e\u8074\u724c\u5f62\u306e\u96c6\u5408\u306e\u8981\u7d20\u6570\u3067\u5272\u308b\u3053\u3068\u3067, \u3059\u3079\u3066\u306e\u8074\u724c\u5f62\u306e\u51fa\u73fe\u78ba\u7387\u304c\u305d\u308c\u305e\u308c\u7b49\u3057\u3044\u3068\u3057\u305f\u3068\u304d\u306b\u3042\u308b\u724c\u3092\u5f85\u3064\u78ba\u7387\u3092\u8a08\u7b97\u3067\u304d\u308b. \u3064\u307e\u308a, \u6700\u3082\u5358\u7d14\u306a\u4eee\u5b9a\u306e\u4e0b\u3067\u724c\u306e\u5371\u967a\u5ea6\u3092\u4e88\u6e2c\u3067\u304d\u308b. \u3053\u308c\u306b\u3064\u3044\u3066\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f predictor \u3092\u53c2\u7167\u3059\u308b\u3053\u3068. \\[ (\\text{\u3042\u308b\u724c\u3092\u5f85\u3064\u78ba\u7387}) = \\frac{(\\text{\u305d\u306e\u724c\u3092\u5f85\u3064\u8074\u724c\u5f62\u306e\u6570})}{(\\text{\u3059\u3079\u3066\u306e\u8074\u724c\u5f62\u306e\u6570})} \\]","title":"\u8074\u724c\u5f62"},{"location":"tenhou/","text":"\u5929\u548c\u306e\u78ba\u7387 \u00b6 \u6982\u8981 \u00b6 \u5929\u548c\u306e\u78ba\u7387\u306f\u4ee5\u4e0b\u306e\u5f0f\u3067\u4e0e\u3048\u3089\u308c\u308b. \\[ \\mbox{\u5929\u548c\u306e\u78ba\u7387} = \\frac{\\mbox{\u56db\u9762\u5b50\u4e00\u96c0\u982d\u306e\u6570\u2460}-\\mbox{\u4e8c\u76c3\u53e3\u306e\u6570\u2461}+\\mbox{\u4e03\u5bfe\u5b50\u306e\u6570\u2462}+\\mbox{\u56fd\u58eb\u7121\u53cc\u306e\u6570\u2463}}{\\mbox{\u5168\u624b\u724c\u306e\u6570\u2464}} \\] \u2462, \u2463, \u2464 \u306f\u7c21\u5358\u306a\u6570\u5f0f\u3067\u8868\u305b\u308b. \\[ \\begin{aligned} \\mbox{\u4e03\u5bfe\u5b50\u306e\u6570\u2462} &= {}_{34}C_{7} \\times ({}_4C_2)^{7} \\\\ \\mbox{\u56fd\u58eb\u7121\u53cc\u306e\u6570\u2463} &= 13 \\times {}_4C_2 \\times ({}_4C_1)^{12} \\\\ \\mbox{\u5168\u624b\u724c\u306e\u6570\u2464} &= {}_{136}C_{14} \\end{aligned} \\] \u2460 \u3068 \u2461 \u306f\u7c21\u5358\u306a\u6570\u5f0f\u3067\u8868\u305b\u306a\u3044\u304c, 5. \u9023\u7acb\u96c6\u5408\u6f38\u5316\u5f0f \u3092\u7528\u3044\u3066\u9ad8\u901f\u306b\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b. \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u00binclude <iostream> #include <functional> #include <vector> // \u624b\u724c\u751f\u6210(\u5168\u5e45) template < int N > void generate ( int n , int m , std :: function < void ( std :: vector < int >& ) > func ) { static std :: vector < int > h ( N ); if ( n == N ) { func ( h ); } else { for ( int i = std :: max ( 0 , m - 4 * ( N - 1 - n )); i <= std :: min ( 4 , m ); ++ i ) { h [ n ] = i ; generate < N > ( n + 1 , m - i , func ); } } } // 3N\u548c\u4e86\u5224\u5b9a bool iswh0 ( const int * h ) { int a = h [ 0 ], b = h [ 1 ]; for ( int i = 0 ; i < 7 ; ++ i ) { if ( int r = a % 3 ; b >= r && h [ i + 2 ] >= r ) { a = b - r ; b = h [ i + 2 ] - r ; } else return false ; } return a % 3 == 0 && b % 3 == 0 ; } // 3N+2\u548c\u4e86\u5224\u5b9a bool iswh2 ( int * h ) { int s = 0 ; for ( int i = 0 ; i < 9 ; ++ i ) { s += i * h [ i ]; } for ( int p = s * 2 % 3 ; p < 9 ; p += 3 ) { if ( h [ p ] >= 2 ) { h [ p ] -= 2 ; if ( iswh0 ( h )) { h [ p ] += 2 ; return true ; } else h [ p ] += 2 ; } } return false ; } // \u4e03\u5bfe\u5b50\u5224\u5b9a bool issp ( const int * h ) { for ( int i = 0 ; i < 9 ; ++ i ) { if ( h [ i ] != 0 && h [ i ] != 2 ) return false ; } return true ; } // \u624b\u724c\u306e\u30d1\u30bf\u30fc\u30f3\u6570 template < class Iter > int patterns ( Iter begin , Iter end ) { // 4Cr static std :: vector < int > combin = { 1 , 4 , 6 , 4 , 1 }; int ret = 1 ; for (; begin != end ; ++ begin ) { ret *= combin [ * begin ]; } return ret ; } // \u3079\u304d\u4e57(x^n) long long pow ( const int x , const int n ) { if ( n == 0 ) return 1 ; long long ret = pow ( x * x , n / 2 ); if ( n & 1 ) ret = ret * x ; return ret ; } // \u7d44\u307f\u5408\u308f\u305b(nCr) __int128_t combin ( const int n , const int r ) { if ( r == 0 ) return 1 ; else return ( n - r + 1 ) * combin ( n , r - 1 ) / r ; } // \u30d1\u30bf\u30fc\u30f3\u6570\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9 struct States { // \u56db\u9762\u5b50\u4e00\u96c0\u982d\u306e\u30d1\u30bf\u30fc\u30f3\u6570 long long first = 0 ; // \u4e8c\u76c3\u53e3\u306e\u30d1\u30bf\u30fc\u30f3\u6570 long long second = 0 ; States & operator += ( const States & rhs ) { first += rhs . first ; second += rhs . second ; return * this ; } States & operator *= ( const States & rhs ) { first *= rhs . first ; second *= rhs . second ; return * this ; } }; const States operator + ( const States & lhs , const States & rhs ) { return States ( lhs ) += rhs ; } const States operator * ( const States & lhs , const States & rhs ) { return States ( lhs ) *= rhs ; } int main () { // |A^n_m| std :: vector < std :: vector < States >> a ( 4 , std :: vector < States > ( 5 )); // |B^n_m| std :: vector < std :: vector < States >> b ( 4 , std :: vector < States > ( 5 )); for ( int m = 0 ; m <= 4 ; ++ m ) { // \u6570\u724c3N\u548c\u4e86\u306e\u30d1\u30bf\u30fc\u30f3\u6570\u3068\u4e8c\u76c3\u53e3\u306e\u30d1\u30bf\u30fc\u30f3\u6570\u3092\u6570\u3048\u308b generate < 9 > ( 0 , 3 * m , [ & ]( std :: vector < int >& h ) { if ( iswh0 ( h . data ())) { auto num = patterns ( h . begin (), h . end ()); a [ 0 ][ m ]. first += num ; if ( issp ( h . data ())) a [ 0 ][ m ]. second += num ; } }); // \u6570\u724c3N+2\u548c\u4e86\u306e\u30d1\u30bf\u30fc\u30f3\u6570\u3068\u4e8c\u76c3\u53e3\u306e\u30d1\u30bf\u30fc\u30f3\u6570\u3092\u6570\u3048\u308b generate < 9 > ( 0 , 3 * m + 2 , [ & ]( std :: vector < int >& h ) { if ( iswh2 ( h . data ())) { auto num = patterns ( h . begin (), h . end ()); b [ 0 ][ m ]. first += num ; if ( issp ( h . data ())) b [ 0 ][ m ]. second += num ; } }); // \u5b57\u724c3N\u548c\u4e86\u306e\u30d1\u30bf\u30fc\u30f3\u6570\u3092\u6570\u3048\u308b generate < 7 > ( 0 , 3 * m , [ & ]( std :: vector < int >& h ) { std :: vector < int > cnt ( 5 , 0 ); for ( int i = 0 ; i < 7 ; ++ i ) { ++ cnt [ h [ i ]]; } if ( cnt [ 1 ] == 0 && cnt [ 2 ] == 0 && cnt [ 4 ] == 0 ) { a [ 3 ][ m ]. first += patterns ( h . begin (), h . end ()); } }); // \u5b57\u724c3N+2\u548c\u4e86\u306e\u30d1\u30bf\u30fc\u30f3\u6570\u3092\u6570\u3048\u308b generate < 7 > ( 0 , 3 * m + 2 , [ & ]( std :: vector < int >& h ) { std :: vector < int > cnt ( 5 , 0 ); for ( int i = 0 ; i < 7 ; ++ i ) { ++ cnt [ h [ i ]]; } if ( cnt [ 1 ] == 0 && cnt [ 2 ] == 1 && cnt [ 4 ] == 0 ) { b [ 3 ][ m ]. first += patterns ( h . begin (), h . end ()); } }); } for ( int m = 1 ; m < 3 ; ++ m ) { std :: copy ( a [ 0 ]. begin (), a [ 0 ]. end (), a [ m ]. begin ()); std :: copy ( b [ 0 ]. begin (), b [ 0 ]. end (), b [ m ]. begin ()); } a [ 3 ][ 0 ]. second = 1 ; b [ 3 ][ 0 ]. second = 42 ; // 4C2*7 // DP\u30c6\u30fc\u30d6\u30ebA std :: vector < States > dp_a ( a [ 0 ]); // DP\u30c6\u30fc\u30d6\u30ebB std :: vector < States > dp_b ( b [ 0 ]); // DP\u30c6\u30fc\u30d6\u30eb\u3092\u66f4\u65b0\u3059\u308b for ( int n = 0 ; n < 3 ; ++ n ) { for ( int m = 4 ; m >= 0 ; -- m ) { States tmp_a , tmp_b ; for ( int l = 0 ; l <= m ; ++ l ) { tmp_a += dp_a [ l ] * a [ n + 1 ][ m - l ]; tmp_b += dp_b [ l ] * a [ n + 1 ][ m - l ] + dp_a [ l ] * b [ n + 1 ][ m - l ]; } dp_a [ m ] = tmp_a ; dp_b [ m ] = tmp_b ; } } // \u4e03\u5bfe\u5b50\u306e\u30d1\u30bf\u30fc\u30f3\u6570 long long num_sp = combin ( 34 , 7 ) * pow ( combin ( 4 , 2 ), 7 ); // \u56fd\u58eb\u7121\u53cc\u306e\u30d1\u30bf\u30fc\u30f3\u6570 long long num_to = 13 * combin ( 4 , 2 ) * pow ( combin ( 4 , 1 ), 12 ); // \u5168\u624b\u724c\u306e\u30d1\u30bf\u30fc\u30f3\u6570 long long num_total = combin ( 136 , 14 ); // \u5206\u5b50 auto numelator = dp_b [ 4 ]. first - dp_b [ 4 ]. second + num_sp + num_to ; std :: cout . precision ( 15 ); std :: cout << numelator << \" / \" << num_total << \" = \" << static_cast < double > ( numelator ) / num_total << std :: endl ; return 0 ; } \u51fa\u529b: 1 12859078207674 / 4250305029168216000 = 3.02544831945638e-06 \u5929\u548c\u306e\u78ba\u7387\u306f 0.000003025 \u3067\u3042\u308b.","title":"A. \u5929\u548c\u306e\u78ba\u7387"},{"location":"tenhou/#_1","text":"","title":"\u5929\u548c\u306e\u78ba\u7387"},{"location":"tenhou/#_2","text":"\u5929\u548c\u306e\u78ba\u7387\u306f\u4ee5\u4e0b\u306e\u5f0f\u3067\u4e0e\u3048\u3089\u308c\u308b. \\[ \\mbox{\u5929\u548c\u306e\u78ba\u7387} = \\frac{\\mbox{\u56db\u9762\u5b50\u4e00\u96c0\u982d\u306e\u6570\u2460}-\\mbox{\u4e8c\u76c3\u53e3\u306e\u6570\u2461}+\\mbox{\u4e03\u5bfe\u5b50\u306e\u6570\u2462}+\\mbox{\u56fd\u58eb\u7121\u53cc\u306e\u6570\u2463}}{\\mbox{\u5168\u624b\u724c\u306e\u6570\u2464}} \\] \u2462, \u2463, \u2464 \u306f\u7c21\u5358\u306a\u6570\u5f0f\u3067\u8868\u305b\u308b. \\[ \\begin{aligned} \\mbox{\u4e03\u5bfe\u5b50\u306e\u6570\u2462} &= {}_{34}C_{7} \\times ({}_4C_2)^{7} \\\\ \\mbox{\u56fd\u58eb\u7121\u53cc\u306e\u6570\u2463} &= 13 \\times {}_4C_2 \\times ({}_4C_1)^{12} \\\\ \\mbox{\u5168\u624b\u724c\u306e\u6570\u2464} &= {}_{136}C_{14} \\end{aligned} \\] \u2460 \u3068 \u2461 \u306f\u7c21\u5358\u306a\u6570\u5f0f\u3067\u8868\u305b\u306a\u3044\u304c, 5. \u9023\u7acb\u96c6\u5408\u6f38\u5316\u5f0f \u3092\u7528\u3044\u3066\u9ad8\u901f\u306b\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b.","title":"\u6982\u8981"},{"location":"tenhou/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 #include <iostream> #include <functional> #include <vector> // \u624b\u724c\u751f\u6210(\u5168\u5e45) template < int N > void generate ( int n , int m , std :: function < void ( std :: vector < int >& ) > func ) { static std :: vector < int > h ( N ); if ( n == N ) { func ( h ); } else { for ( int i = std :: max ( 0 , m - 4 * ( N - 1 - n )); i <= std :: min ( 4 , m ); ++ i ) { h [ n ] = i ; generate < N > ( n + 1 , m - i , func ); } } } // 3N\u548c\u4e86\u5224\u5b9a bool iswh0 ( const int * h ) { int a = h [ 0 ], b = h [ 1 ]; for ( int i = 0 ; i < 7 ; ++ i ) { if ( int r = a % 3 ; b >= r && h [ i + 2 ] >= r ) { a = b - r ; b = h [ i + 2 ] - r ; } else return false ; } return a % 3 == 0 && b % 3 == 0 ; } // 3N+2\u548c\u4e86\u5224\u5b9a bool iswh2 ( int * h ) { int s = 0 ; for ( int i = 0 ; i < 9 ; ++ i ) { s += i * h [ i ]; } for ( int p = s * 2 % 3 ; p < 9 ; p += 3 ) { if ( h [ p ] >= 2 ) { h [ p ] -= 2 ; if ( iswh0 ( h )) { h [ p ] += 2 ; return true ; } else h [ p ] += 2 ; } } return false ; } // \u4e03\u5bfe\u5b50\u5224\u5b9a bool issp ( const int * h ) { for ( int i = 0 ; i < 9 ; ++ i ) { if ( h [ i ] != 0 && h [ i ] != 2 ) return false ; } return true ; } // \u624b\u724c\u306e\u30d1\u30bf\u30fc\u30f3\u6570 template < class Iter > int patterns ( Iter begin , Iter end ) { // 4Cr static std :: vector < int > combin = { 1 , 4 , 6 , 4 , 1 }; int ret = 1 ; for (; begin != end ; ++ begin ) { ret *= combin [ * begin ]; } return ret ; } // \u3079\u304d\u4e57(x^n) long long pow ( const int x , const int n ) { if ( n == 0 ) return 1 ; long long ret = pow ( x * x , n / 2 ); if ( n & 1 ) ret = ret * x ; return ret ; } // \u7d44\u307f\u5408\u308f\u305b(nCr) __int128_t combin ( const int n , const int r ) { if ( r == 0 ) return 1 ; else return ( n - r + 1 ) * combin ( n , r - 1 ) / r ; } // \u30d1\u30bf\u30fc\u30f3\u6570\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9 struct States { // \u56db\u9762\u5b50\u4e00\u96c0\u982d\u306e\u30d1\u30bf\u30fc\u30f3\u6570 long long first = 0 ; // \u4e8c\u76c3\u53e3\u306e\u30d1\u30bf\u30fc\u30f3\u6570 long long second = 0 ; States & operator += ( const States & rhs ) { first += rhs . first ; second += rhs . second ; return * this ; } States & operator *= ( const States & rhs ) { first *= rhs . first ; second *= rhs . second ; return * this ; } }; const States operator + ( const States & lhs , const States & rhs ) { return States ( lhs ) += rhs ; } const States operator * ( const States & lhs , const States & rhs ) { return States ( lhs ) *= rhs ; } int main () { // |A^n_m| std :: vector < std :: vector < States >> a ( 4 , std :: vector < States > ( 5 )); // |B^n_m| std :: vector < std :: vector < States >> b ( 4 , std :: vector < States > ( 5 )); for ( int m = 0 ; m <= 4 ; ++ m ) { // \u6570\u724c3N\u548c\u4e86\u306e\u30d1\u30bf\u30fc\u30f3\u6570\u3068\u4e8c\u76c3\u53e3\u306e\u30d1\u30bf\u30fc\u30f3\u6570\u3092\u6570\u3048\u308b generate < 9 > ( 0 , 3 * m , [ & ]( std :: vector < int >& h ) { if ( iswh0 ( h . data ())) { auto num = patterns ( h . begin (), h . end ()); a [ 0 ][ m ]. first += num ; if ( issp ( h . data ())) a [ 0 ][ m ]. second += num ; } }); // \u6570\u724c3N+2\u548c\u4e86\u306e\u30d1\u30bf\u30fc\u30f3\u6570\u3068\u4e8c\u76c3\u53e3\u306e\u30d1\u30bf\u30fc\u30f3\u6570\u3092\u6570\u3048\u308b generate < 9 > ( 0 , 3 * m + 2 , [ & ]( std :: vector < int >& h ) { if ( iswh2 ( h . data ())) { auto num = patterns ( h . begin (), h . end ()); b [ 0 ][ m ]. first += num ; if ( issp ( h . data ())) b [ 0 ][ m ]. second += num ; } }); // \u5b57\u724c3N\u548c\u4e86\u306e\u30d1\u30bf\u30fc\u30f3\u6570\u3092\u6570\u3048\u308b generate < 7 > ( 0 , 3 * m , [ & ]( std :: vector < int >& h ) { std :: vector < int > cnt ( 5 , 0 ); for ( int i = 0 ; i < 7 ; ++ i ) { ++ cnt [ h [ i ]]; } if ( cnt [ 1 ] == 0 && cnt [ 2 ] == 0 && cnt [ 4 ] == 0 ) { a [ 3 ][ m ]. first += patterns ( h . begin (), h . end ()); } }); // \u5b57\u724c3N+2\u548c\u4e86\u306e\u30d1\u30bf\u30fc\u30f3\u6570\u3092\u6570\u3048\u308b generate < 7 > ( 0 , 3 * m + 2 , [ & ]( std :: vector < int >& h ) { std :: vector < int > cnt ( 5 , 0 ); for ( int i = 0 ; i < 7 ; ++ i ) { ++ cnt [ h [ i ]]; } if ( cnt [ 1 ] == 0 && cnt [ 2 ] == 1 && cnt [ 4 ] == 0 ) { b [ 3 ][ m ]. first += patterns ( h . begin (), h . end ()); } }); } for ( int m = 1 ; m < 3 ; ++ m ) { std :: copy ( a [ 0 ]. begin (), a [ 0 ]. end (), a [ m ]. begin ()); std :: copy ( b [ 0 ]. begin (), b [ 0 ]. end (), b [ m ]. begin ()); } a [ 3 ][ 0 ]. second = 1 ; b [ 3 ][ 0 ]. second = 42 ; // 4C2*7 // DP\u30c6\u30fc\u30d6\u30ebA std :: vector < States > dp_a ( a [ 0 ]); // DP\u30c6\u30fc\u30d6\u30ebB std :: vector < States > dp_b ( b [ 0 ]); // DP\u30c6\u30fc\u30d6\u30eb\u3092\u66f4\u65b0\u3059\u308b for ( int n = 0 ; n < 3 ; ++ n ) { for ( int m = 4 ; m >= 0 ; -- m ) { States tmp_a , tmp_b ; for ( int l = 0 ; l <= m ; ++ l ) { tmp_a += dp_a [ l ] * a [ n + 1 ][ m - l ]; tmp_b += dp_b [ l ] * a [ n + 1 ][ m - l ] + dp_a [ l ] * b [ n + 1 ][ m - l ]; } dp_a [ m ] = tmp_a ; dp_b [ m ] = tmp_b ; } } // \u4e03\u5bfe\u5b50\u306e\u30d1\u30bf\u30fc\u30f3\u6570 long long num_sp = combin ( 34 , 7 ) * pow ( combin ( 4 , 2 ), 7 ); // \u56fd\u58eb\u7121\u53cc\u306e\u30d1\u30bf\u30fc\u30f3\u6570 long long num_to = 13 * combin ( 4 , 2 ) * pow ( combin ( 4 , 1 ), 12 ); // \u5168\u624b\u724c\u306e\u30d1\u30bf\u30fc\u30f3\u6570 long long num_total = combin ( 136 , 14 ); // \u5206\u5b50 auto numelator = dp_b [ 4 ]. first - dp_b [ 4 ]. second + num_sp + num_to ; std :: cout . precision ( 15 ); std :: cout << numelator << \" / \" << num_total << \" = \" << static_cast < double > ( numelator ) / num_total << std :: endl ; return 0 ; } \u51fa\u529b: 1 12859078207674 / 4250305029168216000 = 3.02544831945638e-06 \u5929\u548c\u306e\u78ba\u7387\u306f 0.000003025 \u3067\u3042\u308b.","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"tile_space/","text":"\u724c\u7a7a\u9593 \u00b6 \u5b9a\u7fa9 \u00b6 \u842c\u5b50, \u7b52\u5b50, \u7d22\u5b50, \u5b57\u724c\u306e\u5404\u96c6\u5408\u3092\u9806\u306b \\(H^0, H^1, H^2, H^3\\) \u3068\u8868\u3059. \u4e0a\u4ed8\u304d\u6dfb\u3048\u5b57\u306f\u724c\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u533a\u5225\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3042\u308b. \u3059\u3079\u3066\u306e\u724c\u306e\u96c6\u5408\u306f \\[ H = H^0 \\times H^1 \\times H^2 \\times H^3 \\] \u306e\u3088\u3046\u306b \u76f4\u7a4d\u96c6\u5408 \u3068\u3057\u3066\u8868\u3055\u308c\u308b. \u3055\u3089\u306b\u4efb\u610f\u306e\u624b\u724c \\(h \\in H\\) \u3092 \\[ h = (h^0, h^1, h^2, h^3) \\] \u306e\u3088\u3046\u306b\u9806\u5e8f\u5bfe(\u30bf\u30d7\u30eb)\u3067\u8868\u3059. \u305f\u3060\u3057 \\(h^n \\in H^n\\) \u306f \\(n\\) \u756a\u76ee\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u724c\u306e\u96c6\u5408\u3067\u3042\u308b. \u307e\u305f \\(h^n_i\\) \u306e\u3088\u3046\u306b\u4e0b\u4ed8\u304d\u6dfb\u3048\u5b57\u3092\u4ed8\u3051\u308b\u5834\u5408\u306f \\(n\\) \u756a\u76ee\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u724c\u306e\u96c6\u5408\u304b\u3089 \\(i\\) \u756a\u76ee\u306e\u724c\u306e\u679a\u6570\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3092\u610f\u5473\u3059\u308b. \u4f8b\u3048\u3070 \\(h^0_0\\) \u306f\u4e00\u842c\u306e\u679a\u6570, \\(h^1_8\\) \u306f\u4e5d\u7b52\u306e\u679a\u6570, \\(h^3_0\\) \u306f\u6771\u306e\u679a\u6570, \\(h^3_4\\) \u306f\u767d\u306e\u679a\u6570\u3067\u3042\u308b. \u724c\u3068\u5404\u6dfb\u3048\u5b57\u306e\u5bfe\u5fdc\u306f\u4ee5\u4e0b\u306e\u8868\u306e\u3088\u3046\u306b\u306a\u308b. n\\i 0 1 2 3 4 5 6 7 8 0 \u4e00\u842c \u4e8c\u842c \u4e09\u842c \u56db\u842c \u4e94\u842c \u516d\u842c \u4e03\u842c \u516b\u842c \u4e5d\u842c 1 \u4e00\u7b52 \u4e8c\u7b52 \u4e09\u7b52 \u56db\u7b52 \u4e94\u7b52 \u516d\u7b52 \u4e03\u7b52 \u516b\u7b52 \u4e5d\u7b52 2 \u4e00\u7d22 \u4e8c\u7d22 \u4e09\u7d22 \u56db\u7d22 \u4e94\u7d22 \u516d\u7d22 \u4e03\u7d22 \u516b\u7d22 \u4e5d\u7d22 3 \u6771 \u5357 \u897f \u5317 \u767d \u767a \u4e2d","title":"1. \u724c\u7a7a\u9593"},{"location":"tile_space/#_1","text":"","title":"\u724c\u7a7a\u9593"},{"location":"tile_space/#_2","text":"\u842c\u5b50, \u7b52\u5b50, \u7d22\u5b50, \u5b57\u724c\u306e\u5404\u96c6\u5408\u3092\u9806\u306b \\(H^0, H^1, H^2, H^3\\) \u3068\u8868\u3059. \u4e0a\u4ed8\u304d\u6dfb\u3048\u5b57\u306f\u724c\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u533a\u5225\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3042\u308b. \u3059\u3079\u3066\u306e\u724c\u306e\u96c6\u5408\u306f \\[ H = H^0 \\times H^1 \\times H^2 \\times H^3 \\] \u306e\u3088\u3046\u306b \u76f4\u7a4d\u96c6\u5408 \u3068\u3057\u3066\u8868\u3055\u308c\u308b. \u3055\u3089\u306b\u4efb\u610f\u306e\u624b\u724c \\(h \\in H\\) \u3092 \\[ h = (h^0, h^1, h^2, h^3) \\] \u306e\u3088\u3046\u306b\u9806\u5e8f\u5bfe(\u30bf\u30d7\u30eb)\u3067\u8868\u3059. \u305f\u3060\u3057 \\(h^n \\in H^n\\) \u306f \\(n\\) \u756a\u76ee\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u724c\u306e\u96c6\u5408\u3067\u3042\u308b. \u307e\u305f \\(h^n_i\\) \u306e\u3088\u3046\u306b\u4e0b\u4ed8\u304d\u6dfb\u3048\u5b57\u3092\u4ed8\u3051\u308b\u5834\u5408\u306f \\(n\\) \u756a\u76ee\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u724c\u306e\u96c6\u5408\u304b\u3089 \\(i\\) \u756a\u76ee\u306e\u724c\u306e\u679a\u6570\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3092\u610f\u5473\u3059\u308b. \u4f8b\u3048\u3070 \\(h^0_0\\) \u306f\u4e00\u842c\u306e\u679a\u6570, \\(h^1_8\\) \u306f\u4e5d\u7b52\u306e\u679a\u6570, \\(h^3_0\\) \u306f\u6771\u306e\u679a\u6570, \\(h^3_4\\) \u306f\u767d\u306e\u679a\u6570\u3067\u3042\u308b. \u724c\u3068\u5404\u6dfb\u3048\u5b57\u306e\u5bfe\u5fdc\u306f\u4ee5\u4e0b\u306e\u8868\u306e\u3088\u3046\u306b\u306a\u308b. n\\i 0 1 2 3 4 5 6 7 8 0 \u4e00\u842c \u4e8c\u842c \u4e09\u842c \u56db\u842c \u4e94\u842c \u516d\u842c \u4e03\u842c \u516b\u842c \u4e5d\u842c 1 \u4e00\u7b52 \u4e8c\u7b52 \u4e09\u7b52 \u56db\u7b52 \u4e94\u7b52 \u516d\u7b52 \u4e03\u7b52 \u516b\u7b52 \u4e5d\u7b52 2 \u4e00\u7d22 \u4e8c\u7d22 \u4e09\u7d22 \u56db\u7d22 \u4e94\u7d22 \u516d\u7d22 \u4e03\u7d22 \u516b\u7d22 \u4e5d\u7d22 3 \u6771 \u5357 \u897f \u5317 \u767d \u767a \u4e2d","title":"\u5b9a\u7fa9"},{"location":"unique_form/","text":"\u56fa\u6709\u5f62 \u00b6 \u5b9a\u7fa9 \u00b6 \u9664\u53bb\u53ef\u80fd\u9762\u5b50 \\(3N+1\\) (\u307e\u305f\u306f \\(3N+2\\) )\u8074\u724c\u5f62 \\(h \\in H\\) \u306b\u5bfe\u3057\u3066, \u305d\u306e\u9762\u5b50\u3092\u9664\u3044\u3066\u3082\u8074\u724c\u3092\u7dad\u6301\u3059\u308b\u3082\u306e\u3092\u9664\u53bb\u53ef\u80fd\u9762\u5b50\u3068\u5b9a\u7fa9\u3059\u308b. \u56fa\u5b9a\u9762\u5b50 \u9664\u53bb\u53ef\u80fd\u9762\u5b50\u306e\u3046\u3061, \u5f85\u3061\u3092\u4e0d\u5909\u306b\u4fdd\u3064\u3082\u306e\u3092\u56fa\u5b9a\u9762\u5b50\u3068\u5b9a\u7fa9\u3059\u308b. \u56fa\u5b9a\u9762\u5b50\u3092\u7528\u3044\u3066\u4ee5\u4e0b\u306e 3 \u7a2e\u985e\u306e\u56fa\u6709\u5f62\u3092\u5b9a\u7fa9\u3059\u308b. \\(3N+1\\) \u8074\u724c\u56fa\u6709\u5f62 \\(h \\in H\\) \u304c \\(3N+1\\) \u8074\u724c\u5f62\u3067\u56fa\u5b9a\u9762\u5b50\u3092\u6301\u305f\u306a\u3044\u306a\u3089\u3070, \\(h \\in H\\) \u306f \\(3N+1\\) \u8074\u724c\u56fa\u6709\u5f62\u3067\u3042\u308b. \\(3N+2\\) \u8074\u724c\u56fa\u6709\u5f62 \\(h^n \\in H^n\\) \u304c \\(3N+2\\) \u8074\u724c\u5f62\u3067\u3042\u308b\u304c \\(3N+2\\) \u548c\u4e86\u5f62\u3067\u306f\u306a\u304f\u56fa\u5b9a\u9762\u5b50\u3092\u6301\u305f\u306a\u3044\u306a\u3089\u3070, \\(h^n \\in H^n\\) \u306f \\(3N+2\\) \u8074\u724c\u56fa\u6709\u5f62\u3067\u3042\u308b. \\(3N+2\\) \u548c\u4e86\u8074\u724c\u56fa\u6709\u5f62 \\(h^n \\in H^n\\) \u304c \\(3N+2\\) \u8074\u724c\u5f62\u3067\u3042\u308b\u3068\u540c\u6642\u306b \\(3N+2\\) \u548c\u4e86\u5f62\u3067\u3042\u308a\u56fa\u5b9a\u9762\u5b50\u3092\u6301\u305f\u306a\u3044\u306a\u3089\u3070, \\(h^n \\in H^n\\) \u306f \\(3N+2\\) \u548c\u4e86\u8074\u724c\u56fa\u6709\u5f62\u3067\u3042\u308b. \u56fa\u6709\u5f62\u306e\u5206\u985e \u00b6 \u4efb\u610f\u306e \\(3N+1\\) \u8074\u724c\u56fa\u6709\u5f62\u306f\u4ee5\u4e0b\u306e\u3044\u305a\u308c\u304b\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u5206\u985e\u3055\u308c\u308b. \\(3N+2\\) \u8074\u724c\u56fa\u6709\u5f62 1 \u3064\u3068\u96c0\u982d\u306e\u7d44\u307f\u5408\u308f\u305b( \u96c0\u982d\u56fa\u5b9a\u578b ) \\(3N+2\\) \u548c\u4e86\u8074\u724c\u56fa\u6709\u5f62 2 \u3064\u306e\u7d44\u307f\u5408\u308f\u305b( \u30b7\u30e3\u30dc\u578b ) \u4e0a\u8a18\u4ee5\u5916( \u4e00\u4f53\u578b ) \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u00b6 \u56fa\u5b9a\u9762\u5b50\u306e\u53d6\u308a\u6271\u3044\u306b\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3042\u308b. \u9664\u53bb\u53ef\u80fd\u9762\u5b50\u3092\u9664\u3044\u305f\u5f8c\u306e\u624b\u724c\u306e\u5f85\u3061\u3092 \\(W'\\) , \u5143\u306e\u624b\u724c\u306e\u5f85\u3061\u3092 \\(W\\) \u3068\u3059\u308b\u3068\u57fa\u672c\u7684\u306b\u306f \\(W' \\subseteq{W}\\) \u3068\u306a\u308b. \u3057\u304b\u3057, 2222345 \u306e\u3088\u3046\u306a 4 \u679a\u4f7f\u3044\u304c\u542b\u307e\u308c\u308b\u624b\u724c\u306e\u5834\u5408, \u9664\u53bb\u53ef\u80fd\u9762\u5b50 222 \u3092\u9664\u304f\u3068 2 \u304c\u5f85\u3061\u306b\u542b\u307e\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u304b\u3089 \\(W' \\supset{W}\\) \u3068\u306a\u308a\u5f97\u308b. \u305d\u3053\u3067 \\(W' = W\\) \u3068\u306a\u308b\u9664\u53bb\u53ef\u80fd\u9762\u5b50\u3092\u56fa\u5b9a\u9762\u5b50\u3068\u3059\u308b\u306e\u3067\u306f\u306a\u304f \\(W' \\supseteq{W}\\) \u3068\u306a\u308b\u9664\u53bb\u53ef\u80fd\u9762\u5b50\u3092\u56fa\u5b9a\u9762\u5b50\u3068\u307f\u306a\u3059. 5 \u679a\u76ee\u306e\u724c\u3092\u5f85\u3061\u306b\u542b\u3081\u308b\u306e\u3067\u3042\u308c\u3070 \\(W' \\supset{W}\\) \u3068\u306a\u308b\u3053\u3068\u306f\u306a\u304f 2222345 \u306f\u56fa\u6709\u5f62\u306b\u306f\u306a\u3089\u306a\u3044. 5 \u679a\u76ee\u306e\u724c\u3092\u5f85\u3061\u306b\u542b\u3081\u308b\u5834\u5408\u306b\u304a\u3044\u3066\u3082 2222345 \u306e\u3088\u3046\u306a\u624b\u724c\u3092\u56fa\u6709\u5f62\u3068\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u4e0a\u8a18\u5b9a\u7fa9\u306e\u4fee\u6b63\u3092\u884c\u3063\u305f. 3N+1 \u8074\u724c\u56fa\u6709\u5f62\u5224\u5b9a \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 bool isuf1 ( int * h ) { auto wait = isrh1 ( h ); for ( int i = 0 ; i < 9 ; ++ i ) { if ( h [ i ] >= 3 ) { h [ i ] -= 3 ; auto tmp = isrh1 ( h ); h [ i ] += 3 ; if ((( ~ wait | tmp ) & (( 1 << 9 ) - 1 )) == ( 1 << 9 ) - 1 ) { return false ; } } } for ( int i = 0 ; i < 7 ; ++ i ) { if ( h [ i ] >= 1 && h [ i + 1 ] >= 1 && h [ i + 2 ] >= 1 ) { -- h [ i ]; -- h [ i + 1 ]; -- h [ i + 2 ]; auto tmp = isrh1 ( h ); ++ h [ i ]; ++ h [ i + 1 ]; ++ h [ i + 2 ]; if ((( ~ wait | tmp ) & (( 1 << 9 ) - 1 )) == ( 1 << 9 ) - 1 ) { return false ; } } } return true ; } 3N+2 \u8074\u724c\u56fa\u6709\u5f62\u5224\u5b9a \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 bool isuf2 ( int * h ) { auto wait = isrh2 ( h ); for ( int i = 0 ; i < 9 ; ++ i ) { if ( h [ i ] >= 3 ) { h [ i ] -= 3 ; auto tmp = isrh2 ( h ); h [ i ] += 3 ; if ((( ~ wait | tmp ) & (( 1 << 9 ) - 1 )) == ( 1 << 9 ) - 1 ) { return false ; } } } for ( int i = 0 ; i < 7 ; ++ i ) { if ( h [ i ] >= 1 && h [ i + 1 ] >= 1 && h [ i + 2 ] >= 1 ) { -- h [ i ]; -- h [ i + 1 ]; -- h [ i + 2 ]; auto tmp = isrh2 ( h ); ++ h [ i ]; ++ h [ i + 1 ]; ++ h [ i + 2 ]; if ((( ~ wait | tmp ) & (( 1 << 9 ) - 1 )) == ( 1 << 9 ) - 1 ) { return false ; } } } return true ; } 3N+2 \u548c\u4e86\u8074\u724c\u56fa\u6709\u5f62\u5224\u5b9a \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 bool iswr2 ( int * h ) { auto wait = isrh2 ( h ); for ( int i = 0 ; i < 9 ; ++ i ) { if ( h [ i ] >= 3 ) { h [ i ] -= 3 ; auto tmp = isrh2 ( h ); if ((( ~ wait | tmp ) & (( 1 << 9 ) - 1 )) == ( 1 << 9 ) - 1 && iswh2 ( h )) { h [ i ] += 3 ; return false ; } else h [ i ] += 3 ; } } for ( int i = 0 ; i < 7 ; i ++ ) { if ( h [ i ] >= 1 && h [ i + 1 ] >= 1 && h [ i + 2 ] >= 1 ) { -- h [ i ]; -- h [ i + 1 ]; -- h [ i + 2 ]; auto tmp = isrh2 ( h ); if ((( ~ wait | tmp ) & (( 1 << 9 ) - 1 )) == ( 1 << 9 ) - 1 && iswh2 ( h )) { ++ h [ i ]; ++ h [ i + 1 ]; ++ h [ i + 2 ]; return false ; } else { ++ h [ i ]; ++ h [ i + 1 ]; ++ h [ i + 2 ]; } } } return true ; }","title":"4. \u56fa\u6709\u5f62"},{"location":"unique_form/#_1","text":"","title":"\u56fa\u6709\u5f62"},{"location":"unique_form/#_2","text":"\u9664\u53bb\u53ef\u80fd\u9762\u5b50 \\(3N+1\\) (\u307e\u305f\u306f \\(3N+2\\) )\u8074\u724c\u5f62 \\(h \\in H\\) \u306b\u5bfe\u3057\u3066, \u305d\u306e\u9762\u5b50\u3092\u9664\u3044\u3066\u3082\u8074\u724c\u3092\u7dad\u6301\u3059\u308b\u3082\u306e\u3092\u9664\u53bb\u53ef\u80fd\u9762\u5b50\u3068\u5b9a\u7fa9\u3059\u308b. \u56fa\u5b9a\u9762\u5b50 \u9664\u53bb\u53ef\u80fd\u9762\u5b50\u306e\u3046\u3061, \u5f85\u3061\u3092\u4e0d\u5909\u306b\u4fdd\u3064\u3082\u306e\u3092\u56fa\u5b9a\u9762\u5b50\u3068\u5b9a\u7fa9\u3059\u308b. \u56fa\u5b9a\u9762\u5b50\u3092\u7528\u3044\u3066\u4ee5\u4e0b\u306e 3 \u7a2e\u985e\u306e\u56fa\u6709\u5f62\u3092\u5b9a\u7fa9\u3059\u308b. \\(3N+1\\) \u8074\u724c\u56fa\u6709\u5f62 \\(h \\in H\\) \u304c \\(3N+1\\) \u8074\u724c\u5f62\u3067\u56fa\u5b9a\u9762\u5b50\u3092\u6301\u305f\u306a\u3044\u306a\u3089\u3070, \\(h \\in H\\) \u306f \\(3N+1\\) \u8074\u724c\u56fa\u6709\u5f62\u3067\u3042\u308b. \\(3N+2\\) \u8074\u724c\u56fa\u6709\u5f62 \\(h^n \\in H^n\\) \u304c \\(3N+2\\) \u8074\u724c\u5f62\u3067\u3042\u308b\u304c \\(3N+2\\) \u548c\u4e86\u5f62\u3067\u306f\u306a\u304f\u56fa\u5b9a\u9762\u5b50\u3092\u6301\u305f\u306a\u3044\u306a\u3089\u3070, \\(h^n \\in H^n\\) \u306f \\(3N+2\\) \u8074\u724c\u56fa\u6709\u5f62\u3067\u3042\u308b. \\(3N+2\\) \u548c\u4e86\u8074\u724c\u56fa\u6709\u5f62 \\(h^n \\in H^n\\) \u304c \\(3N+2\\) \u8074\u724c\u5f62\u3067\u3042\u308b\u3068\u540c\u6642\u306b \\(3N+2\\) \u548c\u4e86\u5f62\u3067\u3042\u308a\u56fa\u5b9a\u9762\u5b50\u3092\u6301\u305f\u306a\u3044\u306a\u3089\u3070, \\(h^n \\in H^n\\) \u306f \\(3N+2\\) \u548c\u4e86\u8074\u724c\u56fa\u6709\u5f62\u3067\u3042\u308b.","title":"\u5b9a\u7fa9"},{"location":"unique_form/#_3","text":"\u4efb\u610f\u306e \\(3N+1\\) \u8074\u724c\u56fa\u6709\u5f62\u306f\u4ee5\u4e0b\u306e\u3044\u305a\u308c\u304b\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u5206\u985e\u3055\u308c\u308b. \\(3N+2\\) \u8074\u724c\u56fa\u6709\u5f62 1 \u3064\u3068\u96c0\u982d\u306e\u7d44\u307f\u5408\u308f\u305b( \u96c0\u982d\u56fa\u5b9a\u578b ) \\(3N+2\\) \u548c\u4e86\u8074\u724c\u56fa\u6709\u5f62 2 \u3064\u306e\u7d44\u307f\u5408\u308f\u305b( \u30b7\u30e3\u30dc\u578b ) \u4e0a\u8a18\u4ee5\u5916( \u4e00\u4f53\u578b )","title":"\u56fa\u6709\u5f62\u306e\u5206\u985e"},{"location":"unique_form/#_4","text":"\u56fa\u5b9a\u9762\u5b50\u306e\u53d6\u308a\u6271\u3044\u306b\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3042\u308b. \u9664\u53bb\u53ef\u80fd\u9762\u5b50\u3092\u9664\u3044\u305f\u5f8c\u306e\u624b\u724c\u306e\u5f85\u3061\u3092 \\(W'\\) , \u5143\u306e\u624b\u724c\u306e\u5f85\u3061\u3092 \\(W\\) \u3068\u3059\u308b\u3068\u57fa\u672c\u7684\u306b\u306f \\(W' \\subseteq{W}\\) \u3068\u306a\u308b. \u3057\u304b\u3057, 2222345 \u306e\u3088\u3046\u306a 4 \u679a\u4f7f\u3044\u304c\u542b\u307e\u308c\u308b\u624b\u724c\u306e\u5834\u5408, \u9664\u53bb\u53ef\u80fd\u9762\u5b50 222 \u3092\u9664\u304f\u3068 2 \u304c\u5f85\u3061\u306b\u542b\u307e\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u304b\u3089 \\(W' \\supset{W}\\) \u3068\u306a\u308a\u5f97\u308b. \u305d\u3053\u3067 \\(W' = W\\) \u3068\u306a\u308b\u9664\u53bb\u53ef\u80fd\u9762\u5b50\u3092\u56fa\u5b9a\u9762\u5b50\u3068\u3059\u308b\u306e\u3067\u306f\u306a\u304f \\(W' \\supseteq{W}\\) \u3068\u306a\u308b\u9664\u53bb\u53ef\u80fd\u9762\u5b50\u3092\u56fa\u5b9a\u9762\u5b50\u3068\u307f\u306a\u3059. 5 \u679a\u76ee\u306e\u724c\u3092\u5f85\u3061\u306b\u542b\u3081\u308b\u306e\u3067\u3042\u308c\u3070 \\(W' \\supset{W}\\) \u3068\u306a\u308b\u3053\u3068\u306f\u306a\u304f 2222345 \u306f\u56fa\u6709\u5f62\u306b\u306f\u306a\u3089\u306a\u3044. 5 \u679a\u76ee\u306e\u724c\u3092\u5f85\u3061\u306b\u542b\u3081\u308b\u5834\u5408\u306b\u304a\u3044\u3066\u3082 2222345 \u306e\u3088\u3046\u306a\u624b\u724c\u3092\u56fa\u6709\u5f62\u3068\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u4e0a\u8a18\u5b9a\u7fa9\u306e\u4fee\u6b63\u3092\u884c\u3063\u305f.","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"unique_form/#3n1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 bool isuf1 ( int * h ) { auto wait = isrh1 ( h ); for ( int i = 0 ; i < 9 ; ++ i ) { if ( h [ i ] >= 3 ) { h [ i ] -= 3 ; auto tmp = isrh1 ( h ); h [ i ] += 3 ; if ((( ~ wait | tmp ) & (( 1 << 9 ) - 1 )) == ( 1 << 9 ) - 1 ) { return false ; } } } for ( int i = 0 ; i < 7 ; ++ i ) { if ( h [ i ] >= 1 && h [ i + 1 ] >= 1 && h [ i + 2 ] >= 1 ) { -- h [ i ]; -- h [ i + 1 ]; -- h [ i + 2 ]; auto tmp = isrh1 ( h ); ++ h [ i ]; ++ h [ i + 1 ]; ++ h [ i + 2 ]; if ((( ~ wait | tmp ) & (( 1 << 9 ) - 1 )) == ( 1 << 9 ) - 1 ) { return false ; } } } return true ; }","title":"3N+1 \u8074\u724c\u56fa\u6709\u5f62\u5224\u5b9a"},{"location":"unique_form/#3n2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 bool isuf2 ( int * h ) { auto wait = isrh2 ( h ); for ( int i = 0 ; i < 9 ; ++ i ) { if ( h [ i ] >= 3 ) { h [ i ] -= 3 ; auto tmp = isrh2 ( h ); h [ i ] += 3 ; if ((( ~ wait | tmp ) & (( 1 << 9 ) - 1 )) == ( 1 << 9 ) - 1 ) { return false ; } } } for ( int i = 0 ; i < 7 ; ++ i ) { if ( h [ i ] >= 1 && h [ i + 1 ] >= 1 && h [ i + 2 ] >= 1 ) { -- h [ i ]; -- h [ i + 1 ]; -- h [ i + 2 ]; auto tmp = isrh2 ( h ); ++ h [ i ]; ++ h [ i + 1 ]; ++ h [ i + 2 ]; if ((( ~ wait | tmp ) & (( 1 << 9 ) - 1 )) == ( 1 << 9 ) - 1 ) { return false ; } } } return true ; }","title":"3N+2 \u8074\u724c\u56fa\u6709\u5f62\u5224\u5b9a"},{"location":"unique_form/#3n2_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 bool iswr2 ( int * h ) { auto wait = isrh2 ( h ); for ( int i = 0 ; i < 9 ; ++ i ) { if ( h [ i ] >= 3 ) { h [ i ] -= 3 ; auto tmp = isrh2 ( h ); if ((( ~ wait | tmp ) & (( 1 << 9 ) - 1 )) == ( 1 << 9 ) - 1 && iswh2 ( h )) { h [ i ] += 3 ; return false ; } else h [ i ] += 3 ; } } for ( int i = 0 ; i < 7 ; i ++ ) { if ( h [ i ] >= 1 && h [ i + 1 ] >= 1 && h [ i + 2 ] >= 1 ) { -- h [ i ]; -- h [ i + 1 ]; -- h [ i + 2 ]; auto tmp = isrh2 ( h ); if ((( ~ wait | tmp ) & (( 1 << 9 ) - 1 )) == ( 1 << 9 ) - 1 && iswh2 ( h )) { ++ h [ i ]; ++ h [ i + 1 ]; ++ h [ i + 2 ]; return false ; } else { ++ h [ i ]; ++ h [ i + 1 ]; ++ h [ i + 2 ]; } } } return true ; }","title":"3N+2 \u548c\u4e86\u8074\u724c\u56fa\u6709\u5f62\u5224\u5b9a"},{"location":"wait/","text":"\u914d\u724c\u6642\u6709\u52b9\u724c\u306e\u679a\u6570 \u00b6 \u6982\u8981 \u00b6 \u914d\u724c\u6642(\u624b\u724c\u306e\u679a\u6570\u304c 13 \u679a\u306e\u3068\u304d)\u306e\u6709\u52b9\u724c\u306e\u679a\u6570\u306e\u5e73\u5747\u5024\u3092\u8a08\u7b97\u3059\u308b. \u6709\u52b9\u724c\u306e\u679a\u6570\u306f\u5404\u8272\u306e\u6570\u724c\u306b\u5bfe\u3059\u308b\u53cd\u8ee2\u64cd\u4f5c(\u4f8b\u3048\u3070 1m \u3092 9m \u306b, 2p \u3092 8p \u306b\u79fb\u3059)\u3068\u5b57\u724c\u3069\u3046\u3057\u306e\u5165\u308c\u66ff\u3048\u306b\u95a2\u3057\u3066\u4e0d\u5909\u3067\u3042\u308b, \u3068\u3044\u3046\u6027\u8cea\u3092\u5229\u7528\u3057\u3066\u8a08\u7b97\u91cf\u3092\u5c0f\u3055\u304f\u3067\u304d\u308b. \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u00b6 \u4ee5\u4e0b\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u306f, necessary-or-unnecessary-tiles \u304b\u3089 calsht_dw.hpp \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30d5\u30a1\u30a4\u30eb( index_dw_s.txt \u3068 index_dw_h.txt )\u3092\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3059\u308b\u3053\u3068. \u307e\u305f, \u5b9f\u884c\u306b\u6570\u5206\u9593\u304b\u304b\u308b\u305f\u3081\u6ce8\u610f\u3059\u308b\u3053\u3068. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 #include <chrono> #include <fstream> #include <functional> #include <iostream> #include <unordered_map> #include <numeric> #include <valarray> #include <vector> #include <boost/container_hash/hash.hpp> #include \"calsht_dw.hpp\" using Vec = std :: vector < int > ; using Iter = std :: vector < Vec >:: iterator ; struct Key ; struct Hash ; using Keys = std :: unordered_map < Key , int , Hash > ; struct Key { Vec hand ; long long dens ; }; template < bool IsHonor > Key make_key ( const Vec & v , const long long d ); template <> Key make_key < true > ( const Vec & v , const long long d ) { Vec tmp ( v ); std :: sort ( tmp . begin (), tmp . end ()); return Key { tmp , d }; } template <> Key make_key < false > ( const Vec & v , const long long d ) { Vec tmp ( v ); std :: reverse ( tmp . begin (), tmp . end ()); return Key { min ( tmp , v ), d }; } struct Hash { std :: size_t operator ()( const Key & key ) const { return boost :: hash_range ( key . hand . begin (), key . hand . end ()); } }; bool operator == ( const Key & lhs , const Key & rhs ) { return lhs . hand == rhs . hand ; } template < bool IsHonor > void generate ( int n , int m , Keys & keys ) { static const Vec c = { 1 , 4 , 6 , 4 , 1 }; static constexpr int N = IsHonor ? 7 : 9 ; static Vec hand ( N ); static Vec dens ( N + 1 , 1 ); if ( n == N ) { const auto key = make_key < IsHonor > ( hand , dens [ n ]); if ( auto itr = keys . find ( key ); itr == keys . end ()) { keys . emplace ( key , 1 ); } else { ++ itr -> second ; } } else { for ( int i = std :: max ( 0 , m - 4 * ( N - 1 - n )); i <= std :: min ( 4 , m ); ++ i ) { hand [ n ] = i ; dens [ n + 1 ] = dens [ n ] * c [ i ]; generate < IsHonor > ( n + 1 , m - i , keys ); } } } inline int coef ( const int i , const int j , const int k ) { if ( i == j && j == k ) { return 1 ; } else if ( i == j || j == k || k == i ) { return 3 ; } else { return 6 ; } } int count ( const Vec & hand , const int64_t wait ) { int tmp = 0 ; for ( int i = 0 ; i < K ; ++ i ) { if (( wait >> i ) & 1 ) { tmp += 4 - hand [ i ]; } } return tmp ; } int main () { constexpr int M = 13 ; CalshtDW calsht ; calsht . initialize ( \"./\" ); const auto start = std :: chrono :: system_clock :: now (); std :: vector < Keys > keys1 ( M + 1 ); std :: vector < Keys > keys2 ( M + 1 ); for ( int m = 0 ; m <= M ; ++ m ) { generate < false > ( 0 , m , keys1 [ m ]); generate < true > ( 0 , m , keys2 [ m ]); } std :: valarray < long long > cnt_sht ( 8 ); std :: valarray < __int128_t > cnt_wait ( 8 ); for ( int i = 0 ; i <= M ; ++ i ) { for ( int j = i ; j <= M - i ; ++ j ) { for ( int k = j ; k <= M - i - j ; ++ k ) { std :: valarray < long long > tmp_sht ( 8 ); std :: valarray < __int128_t > tmp_wait ( 8 ); for ( const auto & [ key0 , value0 ] : keys1 [ i ]) { for ( const auto & [ key1 , value1 ] : keys1 [ j ]) { for ( const auto & [ key2 , value2 ] : keys1 [ k ]) { for ( const auto & [ key3 , value3 ] : keys2 [ M - i - j - k ]) { Vec hand ( K ); std :: copy ( key0 . hand . begin (), key0 . hand . end (), hand . begin ()); std :: copy ( key1 . hand . begin (), key1 . hand . end (), hand . begin () + 9 ); std :: copy ( key2 . hand . begin (), key2 . hand . end (), hand . begin () + 18 ); std :: copy ( key3 . hand . begin (), key3 . hand . end (), hand . begin () + 27 ); const auto [ sht , mode , disc , wait ] = calsht ( hand , M / 3 , 7 ); const auto dens = key0 . dens * value0 * key1 . dens * value1 * key2 . dens * value2 * key3 . dens * value3 ; tmp_sht [ sht ] += dens ; tmp_wait [ sht ] += count ( hand , wait ) * dens ; } } } } cnt_sht += tmp_sht * coef ( i , j , k ); cnt_wait += tmp_wait * coef ( i , j , k ); } } } const auto end = std :: chrono :: system_clock :: now (); const auto total = cnt_sht . sum (); double ev = 0.0 ; std :: cout << \"Shanten \\t Count \\t Prop \\t Avg Wait\" << std :: endl ; for ( int i = 0 ; i < 8 ; ++ i ) { ev += ( i - 1 ) * cnt_sht [ i ]; std :: cout << i - 1 << \" \\t \" << cnt_sht [ i ] << \" \\t \" << static_cast < double > ( cnt_sht [ i ]) / total << \" \\t \" << static_cast < double > ( cnt_wait [ i ]) / cnt_sht [ i ] << std :: endl ; } std :: cout << \"Number of Tiles: \" << M << std :: endl ; std :: cout << \"Total: \" << total << std :: endl ; std :: cout << \"Time (msec.): \" << std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( end - start ). count () << std :: endl ; std :: cout << \"Avg Shanten: \" << ev / total << std :: endl ; std :: cout << \"Avg Wait: \" << static_cast < double > ( cnt_wait . sum ()) / total << std :: endl ; return 0 ; } \u51fa\u529b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Shanten Count Prop Avg Wait -1 0 0 -nan 0 39270395383132 8.1175e-05 4.5843 1 3006175115638776 0.006214 12.2671 2 45249205945148216 0.0935337 23.3215 3 175141291509958900 0.362031 40.4909 4 192909046305573888 0.398758 60.6136 5 63384201353756672 0.13102 77.8174 6 4045365540028416 0.00836209 100.154 Number of Tiles: 13 Total: 483774556165488000 Time (msec.): 212463 Avg Shanten: 3.57968 Avg Wait: 52.1202 \u914d\u724c\u6642(\u624b\u724c\u306e\u679a\u6570\u304c 13 \u679a\u306e\u3068\u304d)\u6709\u52b9\u724c\u306e\u679a\u6570\u306e\u5e73\u5747\u5024\u306f 52.1202 \u3067\u3042\u308b.","title":"D. \u914d\u724c\u6642\u6709\u52b9\u724c\u306e\u679a\u6570"},{"location":"wait/#_1","text":"","title":"\u914d\u724c\u6642\u6709\u52b9\u724c\u306e\u679a\u6570"},{"location":"wait/#_2","text":"\u914d\u724c\u6642(\u624b\u724c\u306e\u679a\u6570\u304c 13 \u679a\u306e\u3068\u304d)\u306e\u6709\u52b9\u724c\u306e\u679a\u6570\u306e\u5e73\u5747\u5024\u3092\u8a08\u7b97\u3059\u308b. \u6709\u52b9\u724c\u306e\u679a\u6570\u306f\u5404\u8272\u306e\u6570\u724c\u306b\u5bfe\u3059\u308b\u53cd\u8ee2\u64cd\u4f5c(\u4f8b\u3048\u3070 1m \u3092 9m \u306b, 2p \u3092 8p \u306b\u79fb\u3059)\u3068\u5b57\u724c\u3069\u3046\u3057\u306e\u5165\u308c\u66ff\u3048\u306b\u95a2\u3057\u3066\u4e0d\u5909\u3067\u3042\u308b, \u3068\u3044\u3046\u6027\u8cea\u3092\u5229\u7528\u3057\u3066\u8a08\u7b97\u91cf\u3092\u5c0f\u3055\u304f\u3067\u304d\u308b.","title":"\u6982\u8981"},{"location":"wait/#_3","text":"\u4ee5\u4e0b\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u306f, necessary-or-unnecessary-tiles \u304b\u3089 calsht_dw.hpp \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30d5\u30a1\u30a4\u30eb( index_dw_s.txt \u3068 index_dw_h.txt )\u3092\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3059\u308b\u3053\u3068. \u307e\u305f, \u5b9f\u884c\u306b\u6570\u5206\u9593\u304b\u304b\u308b\u305f\u3081\u6ce8\u610f\u3059\u308b\u3053\u3068. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 #include <chrono> #include <fstream> #include <functional> #include <iostream> #include <unordered_map> #include <numeric> #include <valarray> #include <vector> #include <boost/container_hash/hash.hpp> #include \"calsht_dw.hpp\" using Vec = std :: vector < int > ; using Iter = std :: vector < Vec >:: iterator ; struct Key ; struct Hash ; using Keys = std :: unordered_map < Key , int , Hash > ; struct Key { Vec hand ; long long dens ; }; template < bool IsHonor > Key make_key ( const Vec & v , const long long d ); template <> Key make_key < true > ( const Vec & v , const long long d ) { Vec tmp ( v ); std :: sort ( tmp . begin (), tmp . end ()); return Key { tmp , d }; } template <> Key make_key < false > ( const Vec & v , const long long d ) { Vec tmp ( v ); std :: reverse ( tmp . begin (), tmp . end ()); return Key { min ( tmp , v ), d }; } struct Hash { std :: size_t operator ()( const Key & key ) const { return boost :: hash_range ( key . hand . begin (), key . hand . end ()); } }; bool operator == ( const Key & lhs , const Key & rhs ) { return lhs . hand == rhs . hand ; } template < bool IsHonor > void generate ( int n , int m , Keys & keys ) { static const Vec c = { 1 , 4 , 6 , 4 , 1 }; static constexpr int N = IsHonor ? 7 : 9 ; static Vec hand ( N ); static Vec dens ( N + 1 , 1 ); if ( n == N ) { const auto key = make_key < IsHonor > ( hand , dens [ n ]); if ( auto itr = keys . find ( key ); itr == keys . end ()) { keys . emplace ( key , 1 ); } else { ++ itr -> second ; } } else { for ( int i = std :: max ( 0 , m - 4 * ( N - 1 - n )); i <= std :: min ( 4 , m ); ++ i ) { hand [ n ] = i ; dens [ n + 1 ] = dens [ n ] * c [ i ]; generate < IsHonor > ( n + 1 , m - i , keys ); } } } inline int coef ( const int i , const int j , const int k ) { if ( i == j && j == k ) { return 1 ; } else if ( i == j || j == k || k == i ) { return 3 ; } else { return 6 ; } } int count ( const Vec & hand , const int64_t wait ) { int tmp = 0 ; for ( int i = 0 ; i < K ; ++ i ) { if (( wait >> i ) & 1 ) { tmp += 4 - hand [ i ]; } } return tmp ; } int main () { constexpr int M = 13 ; CalshtDW calsht ; calsht . initialize ( \"./\" ); const auto start = std :: chrono :: system_clock :: now (); std :: vector < Keys > keys1 ( M + 1 ); std :: vector < Keys > keys2 ( M + 1 ); for ( int m = 0 ; m <= M ; ++ m ) { generate < false > ( 0 , m , keys1 [ m ]); generate < true > ( 0 , m , keys2 [ m ]); } std :: valarray < long long > cnt_sht ( 8 ); std :: valarray < __int128_t > cnt_wait ( 8 ); for ( int i = 0 ; i <= M ; ++ i ) { for ( int j = i ; j <= M - i ; ++ j ) { for ( int k = j ; k <= M - i - j ; ++ k ) { std :: valarray < long long > tmp_sht ( 8 ); std :: valarray < __int128_t > tmp_wait ( 8 ); for ( const auto & [ key0 , value0 ] : keys1 [ i ]) { for ( const auto & [ key1 , value1 ] : keys1 [ j ]) { for ( const auto & [ key2 , value2 ] : keys1 [ k ]) { for ( const auto & [ key3 , value3 ] : keys2 [ M - i - j - k ]) { Vec hand ( K ); std :: copy ( key0 . hand . begin (), key0 . hand . end (), hand . begin ()); std :: copy ( key1 . hand . begin (), key1 . hand . end (), hand . begin () + 9 ); std :: copy ( key2 . hand . begin (), key2 . hand . end (), hand . begin () + 18 ); std :: copy ( key3 . hand . begin (), key3 . hand . end (), hand . begin () + 27 ); const auto [ sht , mode , disc , wait ] = calsht ( hand , M / 3 , 7 ); const auto dens = key0 . dens * value0 * key1 . dens * value1 * key2 . dens * value2 * key3 . dens * value3 ; tmp_sht [ sht ] += dens ; tmp_wait [ sht ] += count ( hand , wait ) * dens ; } } } } cnt_sht += tmp_sht * coef ( i , j , k ); cnt_wait += tmp_wait * coef ( i , j , k ); } } } const auto end = std :: chrono :: system_clock :: now (); const auto total = cnt_sht . sum (); double ev = 0.0 ; std :: cout << \"Shanten \\t Count \\t Prop \\t Avg Wait\" << std :: endl ; for ( int i = 0 ; i < 8 ; ++ i ) { ev += ( i - 1 ) * cnt_sht [ i ]; std :: cout << i - 1 << \" \\t \" << cnt_sht [ i ] << \" \\t \" << static_cast < double > ( cnt_sht [ i ]) / total << \" \\t \" << static_cast < double > ( cnt_wait [ i ]) / cnt_sht [ i ] << std :: endl ; } std :: cout << \"Number of Tiles: \" << M << std :: endl ; std :: cout << \"Total: \" << total << std :: endl ; std :: cout << \"Time (msec.): \" << std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( end - start ). count () << std :: endl ; std :: cout << \"Avg Shanten: \" << ev / total << std :: endl ; std :: cout << \"Avg Wait: \" << static_cast < double > ( cnt_wait . sum ()) / total << std :: endl ; return 0 ; } \u51fa\u529b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Shanten Count Prop Avg Wait -1 0 0 -nan 0 39270395383132 8.1175e-05 4.5843 1 3006175115638776 0.006214 12.2671 2 45249205945148216 0.0935337 23.3215 3 175141291509958900 0.362031 40.4909 4 192909046305573888 0.398758 60.6136 5 63384201353756672 0.13102 77.8174 6 4045365540028416 0.00836209 100.154 Number of Tiles: 13 Total: 483774556165488000 Time (msec.): 212463 Avg Shanten: 3.57968 Avg Wait: 52.1202 \u914d\u724c\u6642(\u624b\u724c\u306e\u679a\u6570\u304c 13 \u679a\u306e\u3068\u304d)\u6709\u52b9\u724c\u306e\u679a\u6570\u306e\u5e73\u5747\u5024\u306f 52.1202 \u3067\u3042\u308b.","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"winning_hand/","text":"\u548c\u4e86\u3068\u8074\u724c \u00b6 \u5b9a\u7fa9 \u00b6 \u901a\u5e38\u306e\u610f\u5473\u3067\u306e\u548c\u4e86\u304a\u3088\u3073\u8074\u724c\u3092\u62e1\u5f35\u3057\u3066, \\(3N\\) \u548c\u4e86\u3068 \\(3N+2\\) \u548c\u4e86, \\(3N+2\\) \u8074\u724c\u3068 \\(3N+1\\) \u8074\u724c\u3092\u5b9a\u7fa9\u3059\u308b. \\(3N\\) \u548c\u4e86 \\(h \\in H\\) \u304c \\(N\\) ( \\(N\\) \u306f\u4efb\u610f\u306e\u81ea\u7136\u6570)\u7d44\u306e\u9762\u5b50\u306b\u5206\u89e3\u3067\u304d\u308b\u306a\u3089\u3070, \\(h\\) \u306f \\(3N\\) \u548c\u4e86\u3067\u3042\u308b. \\(3N+2\\) \u548c\u4e86 \\(h \\in H\\) \u304c \\(N\\) ( \\(N\\) \u306f\u4efb\u610f\u306e\u81ea\u7136\u6570)\u7d44\u306e\u9762\u5b50\u3068 1 \u7d44\u306e\u96c0\u982d\u306b\u5206\u89e3\u3067\u304d\u308b\u306a\u3089\u3070, \\(h\\) \u306f \\(3N+2\\) \u548c\u4e86\u3067\u3042\u308b. \\(3N+2\\) \u8074\u724c \\(h \\in H\\) \u306b 1 \u679a\u724c\u3092\u52a0\u3048\u308b\u3053\u3068\u3067 \\(3N\\) \u548c\u4e86\u306b\u306a\u308b\u306a\u3089\u3070, \\(h \\in H\\) \u306f \\(3N+1\\) \u8074\u724c\u3067\u3042\u308b. \u307e\u305f, \u3053\u306e\u3068\u304d\u306b\u52a0\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u724c\u306e\u96c6\u5408\u3092\u5f85\u3061\u3068\u3044\u3046. \\(3N+1\\) \u8074\u724c \\(h \\in H\\) \u306b 1 \u679a\u724c\u3092\u52a0\u3048\u308b\u3053\u3068\u3067 \\(3N+2\\) \u548c\u4e86\u306b\u306a\u308b\u306a\u3089\u3070, \\(h \\in H\\) \u306f \\(3N+1\\) \u8074\u724c\u3067\u3042\u308b. \u307e\u305f, \u3053\u306e\u3068\u304d\u306b\u52a0\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u724c\u306e\u96c6\u5408\u3092\u5f85\u3061\u3068\u3044\u3046. \u56f31: \u624b\u724c\u306e\u72b6\u614b \u548c\u4e86(\u8074\u724c)\u306b\u306a\u308b\u305f\u3081\u306e\u5fc5\u8981\u6761\u4ef6 \u00b6 \u4e00\u8272\u624b\u306e\u724c\u306e\u6dfb\u5b57\u306e\u548c \\(s = \\sum_{i=0}^{8} i h^n_i\\) \u306b\u3064\u3044\u3066\u8003\u3048\u308b. \\(s\\) \u3092\u7528\u3044\u308b\u3053\u3068\u3067\u548c\u4e86(\u8074\u724c)\u306b\u306a\u308b\u305f\u3081\u306e\u5fc5\u8981\u6761\u4ef6\u3092\u5f97\u3089\u308c\u308b. \u306a\u304a, \u4ee5\u4e0b\u306e\u5408\u540c\u5f0f\u3067\u306f \\(\\bmod 3\\) \u3092\u7701\u7565\u3057\u3066\u3044\u308b. 3N \u548c\u4e86\u306b\u306a\u308b\u305f\u3081\u306e\u5fc5\u8981\u6761\u4ef6(\u5b9a\u7406 1) \\(s \\equiv 0\\) \u304c\u6210\u308a\u7acb\u3064. \u540c\u4e00\u306e 3 \u6570\u306e\u548c\u304a\u3088\u3073\u9023\u7d9a\u3059\u308b 3 \u6570\u306e\u548c\u306f\u3068\u3082\u306b 3 \u3067\u5272\u308a\u5207\u308c\u308b\u305f\u3081\u6210\u308a\u7acb\u3064. 3N+2 \u548c\u4e86\u306b\u306a\u308b\u305f\u3081\u306e\u5fc5\u8981\u6761\u4ef6(\u5b9a\u7406 2) \\(p \\equiv 2s\\) \u306a\u308b \\(p\\) \u756a\u76ee\u306e\u724c\u304c\u96c0\u982d\u3068\u306a\u308b. \\(s \\equiv 2p\\) \u3088\u308a \\(2s \\equiv 4p \\equiv p\\) . 3N+2 \u8074\u724c\u306b\u306a\u308b\u305f\u3081\u306e\u5fc5\u8981\u6761\u4ef6(\u5b9a\u7406 3) \\(x \\equiv 2s\\) \u306a\u308b \\(x\\) \u756a\u76ee\u306e\u724c\u304c\u5f85\u3061\u306b\u542b\u307e\u308c\u308b. \u5b9a\u7406 1 \u3088\u308a \\(s+x \\equiv 0\\) . \u6574\u7406\u3057\u3066 \\(x \\equiv -s \\equiv 2s\\) . 3N+1 \u8074\u724c\u306b\u306a\u308b\u305f\u3081\u306e\u5fc5\u8981\u6761\u4ef6(\u5b9a\u7406 4) \\(x + p \\equiv 2s\\) \u306a\u308b \\(x, p\\) \u306b\u3064\u3044\u3066 \\(x\\) \u756a\u76ee\u306e\u724c\u304c\u5f85\u3061\u306b\u542b\u307e\u308c \\(p\\) \u756a\u76ee\u306e\u724c\u304c\u96c0\u982d\u3068\u306a\u308b. \u5b9a\u7406 2 \u3088\u308a \\(p \\equiv 2(s+x)\\) . \u6574\u7406\u3057\u3066 \\(2s \\equiv p - 2x \\equiv p + x\\) . \u4e00\u8272\u624b\u306e\u548c\u4e86(\u8074\u724c)\u5224\u5b9a \u00b6 3N \u548c\u4e86\u5224\u5b9a \u00b6 \\(h^n_i\\) \u306e\u8981\u7d20\u3092 \\(i=0\\) \u304b\u3089\u8d70\u67fb\u3057, \u9762\u5b50\u3092\u53d6\u308a\u51fa\u3057\u3066\u3044\u304f. \\(h^n_i = 1, 2, 4\\) \u306e\u3068\u304d\u306f \\(h^n_i \\bmod 3\\) \u500b\u306e\u9806\u5b50\u3092\u53d6\u308a\u51fa\u3059. \\(h^n_i = 3\\) \u306e\u3068\u304d\u306f, \u53ef\u80fd\u6027\u3068\u3057\u3066\u9806\u5b50 3 \u500b\u3092\u53d6\u308a\u51fa\u3059\u304b\u523b\u5b50 1 \u500b\u3092\u53d6\u308a\u51fa\u3059\u304b\u306e 2 \u901a\u308a\u306e\u64cd\u4f5c\u304c\u8003\u3048\u3089\u308c\u308b\u304c, \u524d\u8005\u304c\u53ef\u80fd\u3067\u3042\u308b\u5834\u5408\u306f\u5f8c\u8005\u3082\u53ef\u80fd\u3068\u306a\u308b\u4e00\u65b9\u3067, \u5f8c\u8005\u304c\u53ef\u80fd\u3067\u3042\u308b\u5834\u5408\u306f\u3044\u3064\u3082\u524d\u8005\u304c\u53ef\u80fd\u3068\u306a\u308b\u308f\u3051\u3067\u306f\u306a\u3044. \u3088\u3063\u3066 \\(h^n_i = 3\\) \u306e\u3068\u304d\u306f\u523b\u5b50\u3092\u53d6\u308a\u51fa\u3059\u3068\u6c7a\u3081\u3066\u3057\u307e\u3063\u3066\u3088\u3044. 1 2 3 4 5 6 7 8 9 10 11 12 13 bool iswh0 ( const int * h ) { int a = h [ 0 ], b = h [ 1 ]; for ( int i = 0 ; i < 7 ; ++ i ) { if ( int r = a % 3 ; b >= r && h [ i + 2 ] >= r ) { a = b - r ; b = h [ i + 2 ] - r ; } else return false ; } return a % 3 == 0 && b % 3 == 0 ; } 3N+2 \u548c\u4e86\u5224\u5b9a \u00b6 \u96c0\u982d\u5019\u88dc\u3092\u53d6\u308a\u51fa\u3057\u305f\u624b\u724c\u304c \\(3N\\) \u548c\u4e86\u3067\u3042\u308b\u304b\u5224\u5b9a\u3059\u308b. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 bool iswh2 ( int * h ) { int s = 0 ; for ( int i = 0 ; i < 9 ; ++ i ) { s += i * h [ i ]; } for ( int p = s * 2 % 3 ; p < 9 ; p += 3 ) { if ( h [ p ] >= 2 ) { h [ p ] -= 2 ; if ( iswh0 ( h )) { h [ p ] += 2 ; return true ; } else h [ p ] += 2 ; } } return false ; } 3N+2 \u8074\u724c\u5224\u5b9a \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 int isrh2 ( int * h ) { int s = 0 , wait = 0 ; for ( int i = 0 ; i < 9 ; ++ i ) { s += i * h [ i ]; } for ( int x = s * 2 % 3 ; x < 9 ; x += 3 ) { if ( h [ x ] < 4 ) { ++ h [ x ]; if ( iswh0 ( h )) { wait ^= 1 << x ; } -- h [ x ]; } } return wait ; } 3N+1 \u8074\u724c\u5224\u5b9a \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 int isrh1 ( int * h ) { int s = 0 , wait = 0 ; for ( int i = 0 ; i < 9 ; ++ i ) { s += i * h [ i ]; } for ( int x = 0 ; x < 9 ; ++ x ) { if ( h [ x ] < 4 ) { ++ h [ x ]; for ( int p = ( s * 2 - x ) % 3 ; p < 9 ; p += 3 ) { if ( h [ p ] >= 2 ) { h [ p ] -= 2 ; if ( iswh0 ( h )) { h [ p ] += 2 ; wait ^= 1 << x ; break ; } else h [ p ] += 2 ; } } -- h [ x ]; } } return wait ; } \u4e00\u8272\u624b\u306e\u9762\u5b50\u5206\u89e3\u30d1\u30bf\u30fc\u30f3\u5217\u6319 \u00b6 \u548c\u4e86\u624b\u724c\u306b\u5bfe\u3057\u3066\u9762\u5b50\u5206\u89e3\u30d1\u30bf\u30fc\u30f3\u3092\u5217\u6319\u3059\u308b. \u5927\u62b5\u306e\u5834\u5408, \u9762\u5b50\u5206\u89e3\u30d1\u30bf\u30fc\u30f3\u306f 1 \u3064\u3067\u4e0a\u8a18\u306e\u548c\u4e86\u5224\u5b9a\u3068\u540c\u6642\u306b\u9762\u5b50\u5206\u89e3\u30d1\u30bf\u30fc\u30f3\u3092\u53d6\u5f97\u3067\u304d\u308b. \u3057\u304b\u3057\u4e00\u90e8\u306e\u548c\u4e86\u624b\u724c\u306f\u8907\u6570\u306e\u9762\u5b50\u5206\u89e3\u30d1\u30bf\u30fc\u30f3\u3092\u3082\u3064\u305f\u3081, \u305d\u308c\u3089\u3092\u5217\u6319\u3059\u308b\u305f\u3081\u306b\u306f\u6b21\u306e 2 \u3064\u306e\u4e0d\u5b9a\u6027\u306b\u6ce8\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b. \u96c0\u982d\u306e\u4e0d\u5b9a\u6027 \u523b\u5b50\u306e\u4e0d\u5b9a\u6027 1 \u3064\u76ee\u306e\u96c0\u982d\u306e\u4e0d\u5b9a\u6027\u3068\u306f, \u4f8b\u3048\u3070\u624b\u724c 11223344 \u304c[11][234][234]\u3068[123][123][44]\u306e\u3088\u3046\u306b\u8907\u6570\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u5206\u89e3\u3055\u308c\u96c0\u982d\u304c 1 \u901a\u308a\u306b\u5b9a\u307e\u3089\u306a\u3044\u3053\u3068\u3067\u3042\u308b. 2 \u3064\u76ee\u306e\u523b\u5b50\u306e\u4e0d\u5b9a\u6027\u3068\u306f, \u4f8b\u3048\u3070\u624b\u724c 111222333 \u304c[111][222][333]\u3068[123][123][123]\u306e\u3088\u3046\u306b\u8907\u6570\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u5206\u89e3\u3055\u308c\u523b\u5b50\u3068\u9806\u5b50\u306e\u3069\u3061\u3089\u3092\u53d6\u308a\u51fa\u3059\u304b\u5b9a\u307e\u3089\u306a\u3044\u3053\u3068\u3067\u3042\u308b. \u3053\u308c\u3089\u306e\u4e0d\u5b9a\u6027\u306f\u5358\u72ec\u3067\u5b58\u5728\u3059\u308b\u3053\u3068\u3082\u3042\u308c\u3070\u540c\u6642\u306b\u5b58\u5728\u3059\u308b\u3053\u3068\u3082\u3042\u308b. \u4ee5\u4e0a\u3092\u8003\u616e\u3059\u308b\u3068\u4e00\u8272\u624b\u306e\u9762\u5b50\u5206\u89e3\u30d1\u30bf\u30fc\u30f3\u3092\u5217\u6319\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308b. \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306b\u624b\u724c\u3092\u8868\u3059\u6587\u5b57\u5217\u3092\u4e0e\u3048\u308b\u3068\u9762\u5b50\u5206\u89e3\u30d1\u30bf\u30fc\u30f3\u3092\u5217\u6319\u3059\u308b. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 #include <algorithm> #include <functional> #include <iostream> struct Mentsu { int jantou = 0 ; // \u96c0\u982d\u306e\u6570 (0 to 1) int koutsu = 0 ; // \u523b\u5b50\u306e\u6570 (0 to 1) int shuntsu = 0 ; // \u9806\u5b50\u306e\u6570 (0 to 4) }; bool iswh0 ( const int * h , Mentsu * m ) { int a = h [ 0 ], b = h [ 1 ]; for ( int i = 0 ; i < 7 ; ++ i ) { if ( a >= 3 ) { a -= 3 ; m [ i ]. koutsu = 1 ; } if ( const int r = a ; b >= r && h [ i + 2 ] >= r ) { a = b - r ; b = h [ i + 2 ] - r ; m [ i ]. shuntsu += r ; } else return false ; } if ( a == 3 ) { a = 0 ; m [ 7 ]. koutsu = 1 ; } if ( b == 3 ) { b = 0 ; m [ 8 ]. koutsu = 1 ; } return a == 0 && b == 0 ; } void iswh2 ( int * h , Mentsu * m , std :: function < void ( Mentsu * ) > func ) { int s = 0 ; for ( int i = 0 ; i < 9 ; ++ i ) { s += i * h [ i ]; } for ( int p = s * 2 % 3 ; p < 9 ; p += 3 ) { if ( h [ p ] >= 2 ) { h [ p ] -= 2 ; std :: fill ( m , m + 9 , Mentsu {}); if ( iswh0 ( h , m )) { h [ p ] += 2 ; m [ p ]. jantou = 1 ; func ( m ); } else h [ p ] += 2 ; } } } void koutsu3 ( Mentsu * m , std :: function < void ( Mentsu * ) > func ) { for ( int i = 0 ; i < 7 ; ++ i ) { if ( m [ i ]. koutsu && m [ i + 1 ]. koutsu && m [ i + 2 ]. koutsu ) { m [ i ]. koutsu = 0 ; m [ i + 1 ]. koutsu = 0 ; m [ i + 2 ]. koutsu = 0 ; m [ i ]. shuntsu += 3 ; func ( m ); m [ i ]. koutsu = 1 ; m [ i + 1 ]. koutsu = 1 ; m [ i + 2 ]. koutsu = 1 ; m [ i ]. shuntsu -= 3 ; } } } void print ( const Mentsu * m ) { for ( int i = 0 ; i < 9 ; ++ i ) { if ( m [ i ]. jantou ) { std :: cout << \"[\" << i + 1 << \",\" << i + 1 << \"],\" ; } else if ( m [ i ]. koutsu ) { std :: cout << \"[\" << i + 1 << \",\" << i + 1 << \",\" << i + 1 << \"],\" ; } else if ( m [ i ]. shuntsu ) { for ( int j = 0 ; j < m [ i ]. shuntsu ; ++ j ) { std :: cout << \"[\" << i + 1 << \",\" << i + 2 << \",\" << i + 3 << \"],\" ; } } } std :: cout << \" \\n \" ; } int main ( int argc , char * argv []) { if ( argc != 2 ) { std :: cout << argc << std :: endl ; return 1 ; } int h [ 9 ] = {}; Mentsu m [ 9 ] = {}; for ( int i = 0 ; i < 14 ; ++ i ) { if ( argv [ 1 ][ i ] < '1' && argv [ 1 ][ i ] > '9' ) { return 1 ; } ++ h [ argv [ 1 ][ i ] - '1' ]; } iswh2 ( h , m , []( Mentsu * m ) { print ( m ); koutsu3 ( m , []( Mentsu * m ) { print ( m ); }); }); return 0 ; } \u5165\u529b\u4f8b 1: 1 ./a.out 12344455888999 \u51fa\u529b\u4f8b 1: 1 [1,2,3],[4,4,4],[5,5],[8,8,8],[9,9,9], \u5165\u529b\u4f8b 2: 1 ./a.out 22334455667788 \u51fa\u529b\u4f8b 2: 1 2 3 [2,2],[3,4,5],[3,4,5],[6,7,8],[6,7,8], [2,3,4],[2,3,4],[5,5],[6,7,8],[6,7,8], [2,3,4],[2,3,4],[5,6,7],[5,6,7],[8,8], \u5165\u529b\u4f8b 3: 1 ./a.out 11122233344455 \u51fa\u529b\u4f8b 3: 1 2 3 4 [1,1,1],[2,2],[3,4,5],[3,4,5], [1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5], [1,2,3],[1,2,3],[1,2,3],[4,4,4],[5,5], [1,1,1],[2,3,4],[2,3,4],[2,3,4],[5,5],","title":"3. \u548c\u4e86\u3068\u8074\u724c"},{"location":"winning_hand/#_1","text":"","title":"\u548c\u4e86\u3068\u8074\u724c"},{"location":"winning_hand/#_2","text":"\u901a\u5e38\u306e\u610f\u5473\u3067\u306e\u548c\u4e86\u304a\u3088\u3073\u8074\u724c\u3092\u62e1\u5f35\u3057\u3066, \\(3N\\) \u548c\u4e86\u3068 \\(3N+2\\) \u548c\u4e86, \\(3N+2\\) \u8074\u724c\u3068 \\(3N+1\\) \u8074\u724c\u3092\u5b9a\u7fa9\u3059\u308b. \\(3N\\) \u548c\u4e86 \\(h \\in H\\) \u304c \\(N\\) ( \\(N\\) \u306f\u4efb\u610f\u306e\u81ea\u7136\u6570)\u7d44\u306e\u9762\u5b50\u306b\u5206\u89e3\u3067\u304d\u308b\u306a\u3089\u3070, \\(h\\) \u306f \\(3N\\) \u548c\u4e86\u3067\u3042\u308b. \\(3N+2\\) \u548c\u4e86 \\(h \\in H\\) \u304c \\(N\\) ( \\(N\\) \u306f\u4efb\u610f\u306e\u81ea\u7136\u6570)\u7d44\u306e\u9762\u5b50\u3068 1 \u7d44\u306e\u96c0\u982d\u306b\u5206\u89e3\u3067\u304d\u308b\u306a\u3089\u3070, \\(h\\) \u306f \\(3N+2\\) \u548c\u4e86\u3067\u3042\u308b. \\(3N+2\\) \u8074\u724c \\(h \\in H\\) \u306b 1 \u679a\u724c\u3092\u52a0\u3048\u308b\u3053\u3068\u3067 \\(3N\\) \u548c\u4e86\u306b\u306a\u308b\u306a\u3089\u3070, \\(h \\in H\\) \u306f \\(3N+1\\) \u8074\u724c\u3067\u3042\u308b. \u307e\u305f, \u3053\u306e\u3068\u304d\u306b\u52a0\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u724c\u306e\u96c6\u5408\u3092\u5f85\u3061\u3068\u3044\u3046. \\(3N+1\\) \u8074\u724c \\(h \\in H\\) \u306b 1 \u679a\u724c\u3092\u52a0\u3048\u308b\u3053\u3068\u3067 \\(3N+2\\) \u548c\u4e86\u306b\u306a\u308b\u306a\u3089\u3070, \\(h \\in H\\) \u306f \\(3N+1\\) \u8074\u724c\u3067\u3042\u308b. \u307e\u305f, \u3053\u306e\u3068\u304d\u306b\u52a0\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u724c\u306e\u96c6\u5408\u3092\u5f85\u3061\u3068\u3044\u3046. \u56f31: \u624b\u724c\u306e\u72b6\u614b","title":"\u5b9a\u7fa9"},{"location":"winning_hand/#_3","text":"\u4e00\u8272\u624b\u306e\u724c\u306e\u6dfb\u5b57\u306e\u548c \\(s = \\sum_{i=0}^{8} i h^n_i\\) \u306b\u3064\u3044\u3066\u8003\u3048\u308b. \\(s\\) \u3092\u7528\u3044\u308b\u3053\u3068\u3067\u548c\u4e86(\u8074\u724c)\u306b\u306a\u308b\u305f\u3081\u306e\u5fc5\u8981\u6761\u4ef6\u3092\u5f97\u3089\u308c\u308b. \u306a\u304a, \u4ee5\u4e0b\u306e\u5408\u540c\u5f0f\u3067\u306f \\(\\bmod 3\\) \u3092\u7701\u7565\u3057\u3066\u3044\u308b. 3N \u548c\u4e86\u306b\u306a\u308b\u305f\u3081\u306e\u5fc5\u8981\u6761\u4ef6(\u5b9a\u7406 1) \\(s \\equiv 0\\) \u304c\u6210\u308a\u7acb\u3064. \u540c\u4e00\u306e 3 \u6570\u306e\u548c\u304a\u3088\u3073\u9023\u7d9a\u3059\u308b 3 \u6570\u306e\u548c\u306f\u3068\u3082\u306b 3 \u3067\u5272\u308a\u5207\u308c\u308b\u305f\u3081\u6210\u308a\u7acb\u3064. 3N+2 \u548c\u4e86\u306b\u306a\u308b\u305f\u3081\u306e\u5fc5\u8981\u6761\u4ef6(\u5b9a\u7406 2) \\(p \\equiv 2s\\) \u306a\u308b \\(p\\) \u756a\u76ee\u306e\u724c\u304c\u96c0\u982d\u3068\u306a\u308b. \\(s \\equiv 2p\\) \u3088\u308a \\(2s \\equiv 4p \\equiv p\\) . 3N+2 \u8074\u724c\u306b\u306a\u308b\u305f\u3081\u306e\u5fc5\u8981\u6761\u4ef6(\u5b9a\u7406 3) \\(x \\equiv 2s\\) \u306a\u308b \\(x\\) \u756a\u76ee\u306e\u724c\u304c\u5f85\u3061\u306b\u542b\u307e\u308c\u308b. \u5b9a\u7406 1 \u3088\u308a \\(s+x \\equiv 0\\) . \u6574\u7406\u3057\u3066 \\(x \\equiv -s \\equiv 2s\\) . 3N+1 \u8074\u724c\u306b\u306a\u308b\u305f\u3081\u306e\u5fc5\u8981\u6761\u4ef6(\u5b9a\u7406 4) \\(x + p \\equiv 2s\\) \u306a\u308b \\(x, p\\) \u306b\u3064\u3044\u3066 \\(x\\) \u756a\u76ee\u306e\u724c\u304c\u5f85\u3061\u306b\u542b\u307e\u308c \\(p\\) \u756a\u76ee\u306e\u724c\u304c\u96c0\u982d\u3068\u306a\u308b. \u5b9a\u7406 2 \u3088\u308a \\(p \\equiv 2(s+x)\\) . \u6574\u7406\u3057\u3066 \\(2s \\equiv p - 2x \\equiv p + x\\) .","title":"\u548c\u4e86(\u8074\u724c)\u306b\u306a\u308b\u305f\u3081\u306e\u5fc5\u8981\u6761\u4ef6"},{"location":"winning_hand/#_4","text":"","title":"\u4e00\u8272\u624b\u306e\u548c\u4e86(\u8074\u724c)\u5224\u5b9a"},{"location":"winning_hand/#3n","text":"\\(h^n_i\\) \u306e\u8981\u7d20\u3092 \\(i=0\\) \u304b\u3089\u8d70\u67fb\u3057, \u9762\u5b50\u3092\u53d6\u308a\u51fa\u3057\u3066\u3044\u304f. \\(h^n_i = 1, 2, 4\\) \u306e\u3068\u304d\u306f \\(h^n_i \\bmod 3\\) \u500b\u306e\u9806\u5b50\u3092\u53d6\u308a\u51fa\u3059. \\(h^n_i = 3\\) \u306e\u3068\u304d\u306f, \u53ef\u80fd\u6027\u3068\u3057\u3066\u9806\u5b50 3 \u500b\u3092\u53d6\u308a\u51fa\u3059\u304b\u523b\u5b50 1 \u500b\u3092\u53d6\u308a\u51fa\u3059\u304b\u306e 2 \u901a\u308a\u306e\u64cd\u4f5c\u304c\u8003\u3048\u3089\u308c\u308b\u304c, \u524d\u8005\u304c\u53ef\u80fd\u3067\u3042\u308b\u5834\u5408\u306f\u5f8c\u8005\u3082\u53ef\u80fd\u3068\u306a\u308b\u4e00\u65b9\u3067, \u5f8c\u8005\u304c\u53ef\u80fd\u3067\u3042\u308b\u5834\u5408\u306f\u3044\u3064\u3082\u524d\u8005\u304c\u53ef\u80fd\u3068\u306a\u308b\u308f\u3051\u3067\u306f\u306a\u3044. \u3088\u3063\u3066 \\(h^n_i = 3\\) \u306e\u3068\u304d\u306f\u523b\u5b50\u3092\u53d6\u308a\u51fa\u3059\u3068\u6c7a\u3081\u3066\u3057\u307e\u3063\u3066\u3088\u3044. 1 2 3 4 5 6 7 8 9 10 11 12 13 bool iswh0 ( const int * h ) { int a = h [ 0 ], b = h [ 1 ]; for ( int i = 0 ; i < 7 ; ++ i ) { if ( int r = a % 3 ; b >= r && h [ i + 2 ] >= r ) { a = b - r ; b = h [ i + 2 ] - r ; } else return false ; } return a % 3 == 0 && b % 3 == 0 ; }","title":"3N \u548c\u4e86\u5224\u5b9a"},{"location":"winning_hand/#3n2","text":"\u96c0\u982d\u5019\u88dc\u3092\u53d6\u308a\u51fa\u3057\u305f\u624b\u724c\u304c \\(3N\\) \u548c\u4e86\u3067\u3042\u308b\u304b\u5224\u5b9a\u3059\u308b. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 bool iswh2 ( int * h ) { int s = 0 ; for ( int i = 0 ; i < 9 ; ++ i ) { s += i * h [ i ]; } for ( int p = s * 2 % 3 ; p < 9 ; p += 3 ) { if ( h [ p ] >= 2 ) { h [ p ] -= 2 ; if ( iswh0 ( h )) { h [ p ] += 2 ; return true ; } else h [ p ] += 2 ; } } return false ; }","title":"3N+2 \u548c\u4e86\u5224\u5b9a"},{"location":"winning_hand/#3n2_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 int isrh2 ( int * h ) { int s = 0 , wait = 0 ; for ( int i = 0 ; i < 9 ; ++ i ) { s += i * h [ i ]; } for ( int x = s * 2 % 3 ; x < 9 ; x += 3 ) { if ( h [ x ] < 4 ) { ++ h [ x ]; if ( iswh0 ( h )) { wait ^= 1 << x ; } -- h [ x ]; } } return wait ; }","title":"3N+2 \u8074\u724c\u5224\u5b9a"},{"location":"winning_hand/#3n1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 int isrh1 ( int * h ) { int s = 0 , wait = 0 ; for ( int i = 0 ; i < 9 ; ++ i ) { s += i * h [ i ]; } for ( int x = 0 ; x < 9 ; ++ x ) { if ( h [ x ] < 4 ) { ++ h [ x ]; for ( int p = ( s * 2 - x ) % 3 ; p < 9 ; p += 3 ) { if ( h [ p ] >= 2 ) { h [ p ] -= 2 ; if ( iswh0 ( h )) { h [ p ] += 2 ; wait ^= 1 << x ; break ; } else h [ p ] += 2 ; } } -- h [ x ]; } } return wait ; }","title":"3N+1 \u8074\u724c\u5224\u5b9a"},{"location":"winning_hand/#_5","text":"\u548c\u4e86\u624b\u724c\u306b\u5bfe\u3057\u3066\u9762\u5b50\u5206\u89e3\u30d1\u30bf\u30fc\u30f3\u3092\u5217\u6319\u3059\u308b. \u5927\u62b5\u306e\u5834\u5408, \u9762\u5b50\u5206\u89e3\u30d1\u30bf\u30fc\u30f3\u306f 1 \u3064\u3067\u4e0a\u8a18\u306e\u548c\u4e86\u5224\u5b9a\u3068\u540c\u6642\u306b\u9762\u5b50\u5206\u89e3\u30d1\u30bf\u30fc\u30f3\u3092\u53d6\u5f97\u3067\u304d\u308b. \u3057\u304b\u3057\u4e00\u90e8\u306e\u548c\u4e86\u624b\u724c\u306f\u8907\u6570\u306e\u9762\u5b50\u5206\u89e3\u30d1\u30bf\u30fc\u30f3\u3092\u3082\u3064\u305f\u3081, \u305d\u308c\u3089\u3092\u5217\u6319\u3059\u308b\u305f\u3081\u306b\u306f\u6b21\u306e 2 \u3064\u306e\u4e0d\u5b9a\u6027\u306b\u6ce8\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b. \u96c0\u982d\u306e\u4e0d\u5b9a\u6027 \u523b\u5b50\u306e\u4e0d\u5b9a\u6027 1 \u3064\u76ee\u306e\u96c0\u982d\u306e\u4e0d\u5b9a\u6027\u3068\u306f, \u4f8b\u3048\u3070\u624b\u724c 11223344 \u304c[11][234][234]\u3068[123][123][44]\u306e\u3088\u3046\u306b\u8907\u6570\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u5206\u89e3\u3055\u308c\u96c0\u982d\u304c 1 \u901a\u308a\u306b\u5b9a\u307e\u3089\u306a\u3044\u3053\u3068\u3067\u3042\u308b. 2 \u3064\u76ee\u306e\u523b\u5b50\u306e\u4e0d\u5b9a\u6027\u3068\u306f, \u4f8b\u3048\u3070\u624b\u724c 111222333 \u304c[111][222][333]\u3068[123][123][123]\u306e\u3088\u3046\u306b\u8907\u6570\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u5206\u89e3\u3055\u308c\u523b\u5b50\u3068\u9806\u5b50\u306e\u3069\u3061\u3089\u3092\u53d6\u308a\u51fa\u3059\u304b\u5b9a\u307e\u3089\u306a\u3044\u3053\u3068\u3067\u3042\u308b. \u3053\u308c\u3089\u306e\u4e0d\u5b9a\u6027\u306f\u5358\u72ec\u3067\u5b58\u5728\u3059\u308b\u3053\u3068\u3082\u3042\u308c\u3070\u540c\u6642\u306b\u5b58\u5728\u3059\u308b\u3053\u3068\u3082\u3042\u308b. \u4ee5\u4e0a\u3092\u8003\u616e\u3059\u308b\u3068\u4e00\u8272\u624b\u306e\u9762\u5b50\u5206\u89e3\u30d1\u30bf\u30fc\u30f3\u3092\u5217\u6319\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308b. \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306b\u624b\u724c\u3092\u8868\u3059\u6587\u5b57\u5217\u3092\u4e0e\u3048\u308b\u3068\u9762\u5b50\u5206\u89e3\u30d1\u30bf\u30fc\u30f3\u3092\u5217\u6319\u3059\u308b. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 #include <algorithm> #include <functional> #include <iostream> struct Mentsu { int jantou = 0 ; // \u96c0\u982d\u306e\u6570 (0 to 1) int koutsu = 0 ; // \u523b\u5b50\u306e\u6570 (0 to 1) int shuntsu = 0 ; // \u9806\u5b50\u306e\u6570 (0 to 4) }; bool iswh0 ( const int * h , Mentsu * m ) { int a = h [ 0 ], b = h [ 1 ]; for ( int i = 0 ; i < 7 ; ++ i ) { if ( a >= 3 ) { a -= 3 ; m [ i ]. koutsu = 1 ; } if ( const int r = a ; b >= r && h [ i + 2 ] >= r ) { a = b - r ; b = h [ i + 2 ] - r ; m [ i ]. shuntsu += r ; } else return false ; } if ( a == 3 ) { a = 0 ; m [ 7 ]. koutsu = 1 ; } if ( b == 3 ) { b = 0 ; m [ 8 ]. koutsu = 1 ; } return a == 0 && b == 0 ; } void iswh2 ( int * h , Mentsu * m , std :: function < void ( Mentsu * ) > func ) { int s = 0 ; for ( int i = 0 ; i < 9 ; ++ i ) { s += i * h [ i ]; } for ( int p = s * 2 % 3 ; p < 9 ; p += 3 ) { if ( h [ p ] >= 2 ) { h [ p ] -= 2 ; std :: fill ( m , m + 9 , Mentsu {}); if ( iswh0 ( h , m )) { h [ p ] += 2 ; m [ p ]. jantou = 1 ; func ( m ); } else h [ p ] += 2 ; } } } void koutsu3 ( Mentsu * m , std :: function < void ( Mentsu * ) > func ) { for ( int i = 0 ; i < 7 ; ++ i ) { if ( m [ i ]. koutsu && m [ i + 1 ]. koutsu && m [ i + 2 ]. koutsu ) { m [ i ]. koutsu = 0 ; m [ i + 1 ]. koutsu = 0 ; m [ i + 2 ]. koutsu = 0 ; m [ i ]. shuntsu += 3 ; func ( m ); m [ i ]. koutsu = 1 ; m [ i + 1 ]. koutsu = 1 ; m [ i + 2 ]. koutsu = 1 ; m [ i ]. shuntsu -= 3 ; } } } void print ( const Mentsu * m ) { for ( int i = 0 ; i < 9 ; ++ i ) { if ( m [ i ]. jantou ) { std :: cout << \"[\" << i + 1 << \",\" << i + 1 << \"],\" ; } else if ( m [ i ]. koutsu ) { std :: cout << \"[\" << i + 1 << \",\" << i + 1 << \",\" << i + 1 << \"],\" ; } else if ( m [ i ]. shuntsu ) { for ( int j = 0 ; j < m [ i ]. shuntsu ; ++ j ) { std :: cout << \"[\" << i + 1 << \",\" << i + 2 << \",\" << i + 3 << \"],\" ; } } } std :: cout << \" \\n \" ; } int main ( int argc , char * argv []) { if ( argc != 2 ) { std :: cout << argc << std :: endl ; return 1 ; } int h [ 9 ] = {}; Mentsu m [ 9 ] = {}; for ( int i = 0 ; i < 14 ; ++ i ) { if ( argv [ 1 ][ i ] < '1' && argv [ 1 ][ i ] > '9' ) { return 1 ; } ++ h [ argv [ 1 ][ i ] - '1' ]; } iswh2 ( h , m , []( Mentsu * m ) { print ( m ); koutsu3 ( m , []( Mentsu * m ) { print ( m ); }); }); return 0 ; } \u5165\u529b\u4f8b 1: 1 ./a.out 12344455888999 \u51fa\u529b\u4f8b 1: 1 [1,2,3],[4,4,4],[5,5],[8,8,8],[9,9,9], \u5165\u529b\u4f8b 2: 1 ./a.out 22334455667788 \u51fa\u529b\u4f8b 2: 1 2 3 [2,2],[3,4,5],[3,4,5],[6,7,8],[6,7,8], [2,3,4],[2,3,4],[5,5],[6,7,8],[6,7,8], [2,3,4],[2,3,4],[5,6,7],[5,6,7],[8,8], \u5165\u529b\u4f8b 3: 1 ./a.out 11122233344455 \u51fa\u529b\u4f8b 3: 1 2 3 4 [1,1,1],[2,2],[3,4,5],[3,4,5], [1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5], [1,2,3],[1,2,3],[1,2,3],[4,4,4],[5,5], [1,1,1],[2,3,4],[2,3,4],[2,3,4],[5,5],","title":"\u4e00\u8272\u624b\u306e\u9762\u5b50\u5206\u89e3\u30d1\u30bf\u30fc\u30f3\u5217\u6319"}]}